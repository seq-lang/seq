from Bio.SeqFeature import FeatureLocation, Position
from Bio.SeqFeature import CompoundLocation, UnknownPosition, SeqFeature
from Bio.SeqFeature import WithinPosition, BetweenPosition


####### Test FeatureLocation #######
@test
def test_eq_identical():
    """
    Test two identical locations are equal.
    """
    loc1 = FeatureLocation(23, 42, 1, '', '')
    loc2 = FeatureLocation(23, 42, 1, '', '')   
    assert loc1 == loc2

    loc1 = FeatureLocation(23, 42, -1, '', '')
    loc2 = FeatureLocation(23, 42, -1, '', '')
    assert loc1 == loc2

    loc1 = FeatureLocation(23, 42, -1, '', '')
    loc2 = FeatureLocation(23, 42, -1, '', '')
    assert loc1 == loc2

    loc1 = FeatureLocation(Position(23, 1, 0), Position(42, 2, 0), 1, '', '')
    loc2 = FeatureLocation(23, 42, 1, '', '')
    assert loc1 == loc2

    loc1 = FeatureLocation(23, 42, 1, "foo", "bar")
    loc2 = FeatureLocation(23, 42, 1, "foo", "bar")
    assert loc1 == loc2
test_eq_identical()

@test
def test_eq_not_identical():
    """
    Test two different locations are not equal.
    """
    loc1 = FeatureLocation(22, 42, 1, '', '')
    loc2 = FeatureLocation(23, 42, 1, '', '')
    assert loc1 != loc2

    loc1 = FeatureLocation(23, 42, 1, '', '')
    loc2 = FeatureLocation(23, 43, 1, '', '')
    assert loc1 != loc2

    loc1 = FeatureLocation(23, 42, 1, '', '')
    loc2 = FeatureLocation(23, 42, -1, '', '')
    assert loc1 != loc2
    
    loc1 = FeatureLocation(23, 42, 1, 'foo', '')
    loc2 = FeatureLocation(23, 42, 1, 'bar', '')
    assert loc1 != loc2

    loc1 = FeatureLocation(23, 42, 1, 'foo', 'bar')
    loc2 = FeatureLocation(23, 42, 1, 'foo', 'baz')
    assert loc1 != loc2
test_eq_not_identical()

@test
# not finished need to have raise error with start > end
def test_start_before_end():
    expected = "must be greater than or equal to start location"
    print FeatureLocation(42, 23, 1, '', '')

test_start_before_end()

####### Test CompoundLocation #######

@test
def test_eq_identical1():
    loc1 = FeatureLocation(12, 17, 1, '', '') + FeatureLocation(23, 42, 1, '', '')
    loc2 = FeatureLocation(12, 17, 1, '', '') + FeatureLocation(23, 42, 1, '', '')
    assert loc1 == loc2

    loc1 = FeatureLocation(12, 17, 1, '', '') + FeatureLocation(23, 42, 1, '', '')
    loc2 = CompoundLocation([FeatureLocation(12, 17, 1, '', ''), FeatureLocation(23, 42, 1, '', '')], 'join')
    assert loc1 == loc2
test_eq_identical1()

@test
def test_eq_not_identical1():
    loc1 = FeatureLocation(12, 17, 1, '', '') + FeatureLocation(23, 42, 1, '', '')
    loc2 = FeatureLocation(12, 17, 1, '', '') + FeatureLocation(23, 42, 1, '', '') + FeatureLocation(50, 60, 1, '', '')
    assert loc1 != loc2

    loc1 = FeatureLocation(12, 17, 1, '', '') + FeatureLocation(23, 42, 1, '', '')
    loc2 = FeatureLocation(12, 17, -1, '', '') + FeatureLocation(23, 42, -1, '', '')
    assert loc1 != loc2

    loc1 = CompoundLocation([FeatureLocation(12, 17, 1, '', ''), FeatureLocation(23, 42, 1, '', '')], "join")
    loc2 = CompoundLocation([FeatureLocation(12, 17, 1, '', ''), FeatureLocation(23, 42, 1, '', '')], 'order')
    assert loc1 != loc2
test_eq_not_identical1()  

####### Test Locations #######

@test
# Not finished
def test_fuzzy():
    exact_pos = Position(5, 0, 0)
    within_pos_s = WithinPosition(10, left=10, right=13)
    within_pos_e = WithinPosition(13, left=10, right=13)
    between_pos_e = BetweenPosition(24, 20, 24)
    before_pos = Position(15, 1, 0)
    after_pos = Position(40, 2, 0)

    assert int(within_pos_s) == 10
    assert str(within_pos_s) == "(10.13)"
    assert int(within_pos_e) == 13
    assert str(within_pos_e) == "(10.13)"
    assert int(between_pos_e) == 24
    assert str(between_pos_e) == "(20^24)"
    assert str(before_pos) == "<15"
    assert str(after_pos) == ">40"

    # TODO/CAVEATS:
    # FeatureLocation does not support these types for now.
    # location1 = FeatureLocation(exact_pos, within_pos_e, 1, '', '')
    # location2 = FeatureLocation(before_pos, between_pos_e)
    # location3 = FeatureLocation(within_pos_s, after_pos)
test_fuzzy()

