from bio import *

K: Static[int] = 5

s = s'ACGTAACGTA'
print s                       # EXPECT: ACGTAACGTA
print list(s.kmers(1, K))     # EXPECT: [ACGTA, CGTAA, GTAAC, TAACG, AACGT, ACGTA]
print list(s.split(5, 1))     # EXPECT: [ACGTA, CGTAA, GTAAC, TAACG, AACGT, ACGTA]
print ~s                      # EXPECT: TACGTTACGT
print list((~s).kmers(1, K))  # EXPECT: [TACGT, ACGTT, CGTTA, GTTAC, TTACG, TACGT]
print list((~s).split(5, 1))  # EXPECT: [TACGT, ACGTT, CGTTA, GTTAC, TTACG, TACGT]

s = s'AANGGCCAGTC'
print list(s.kmers_with_pos(1, 2))  # EXPECT: [(0, AA), (3, GG), (4, GC), (5, CC), (6, CA), (7, AG), (8, GT), (9, TC)]
print list(~s |> kmers_with_pos(1, 2))  # EXPECT: [(0, GA), (1, AC), (2, CT), (3, TG), (4, GG), (5, GC), (6, CC), (9, TT)]

s = s'AGACCTTAGC'
print s  # EXPECT: AGACCTTAGC
print list(s.kmers(1, 3))  # EXPECT: [AGA, GAC, ACC, CCT, CTT, TTA, TAG, AGC]
print list(s.kmers(2, 3))  # EXPECT: [AGA, ACC, CTT, TAG]
print list(s.kmers(4, 3))  # EXPECT: [AGA, CTT]
print ~s  # EXPECT: GCTAAGGTCT
print list((~s).kmers(1, 3))  # EXPECT: [GCT, CTA, TAA, AAG, AGG, GGT, GTC, TCT]
print list((~s).kmers(2, 3))  # EXPECT: [GCT, TAA, AGG, GTC]
print list((~s).kmers(4, 3))  # EXPECT: [GCT, AGG]

s = s'AGACCTNTAGNC'
print s  # EXPECT: AGACCTNTAGNC
print list(s.kmers_with_pos(1, 3))  # EXPECT: [(0, AGA), (1, GAC), (2, ACC), (3, CCT), (7, TAG)]
print list(s.kmers_with_pos(2, 3))  # EXPECT: [(0, AGA), (2, ACC)]
print list(s.kmers_with_pos(4, 3))  # EXPECT: [(0, AGA)]
print ~s  # EXPECT: GNCTANAGGTCT
print list((~s).kmers_with_pos(1, 3))  # EXPECT: [(2, CTA), (6, AGG), (7, GGT), (8, GTC), (9, TCT)]
print list((~s).kmers_with_pos(2, 3))  # EXPECT: [(2, CTA), (6, AGG), (8, GTC)]
print list((~s).kmers_with_pos(4, 3))  # EXPECT: [(8, GTC)]

s = s'AGACCTNTAGC'
print list(s.split(k=100, step=1))         # EXPECT: []
print list((~s).split(k=100, step=1))      # EXPECT: []
print list(s.kmers(step=1, k=100))         # EXPECT: []
print list((~s).kmers(step=1, k=100))      # EXPECT: []

s = s'TAGCC'
print list(s.split(k=5, step=17))         # EXPECT: [TAGCC]
print list((~s).split(k=5, step=17))      # EXPECT: [GGCTA]
print list(s.kmers(step=17, k=5))         # EXPECT: [TAGCC]
print list((~s).kmers(step=17, k=5))      # EXPECT: [GGCTA]

k1 = Kmer[K](s'ACGTA')
k2 = Kmer[K](s'ATGTT')

print [k1[i] for i in range(len(k1))]  # EXPECT: [A, C, G, T, A]
print [k2[-i - 1] for i in range(len(k2))]  # EXPECT: [T, T, G, T, A]

print ~k1  # EXPECT: TACGT
print ~k2  # EXPECT: AACAT

print abs(k1 - k2)  # EXPECT: 2
print abs(k2 - k1)  # EXPECT: 2

if k1 > k2:
    print k2 - k1   # EXPECT: -2
    print k1 - k2   # EXPECT: 2
else:
    print k1 - k2
    print k2 - k1

k1, k2 = k2, k1
if k1 > k2:
    print k2 - k1   # EXPECT: -2
    print k1 - k2   # EXPECT: 2
else:
    print k1 - k2
    print k2 - k1

k1 = Kmer[K](s'ACGTA')
k2 = Kmer[K](s'ACGTA')
print k1 - k2  # EXPECT: 0
print k2 - k1  # EXPECT: 0

k1long = Kmer[100]() |> base(0, k'T') |> base(42, k'C') |> base(77, k'G')
k2long = Kmer[100]() |> base(0, k'T') |> base(43, k'C') |> base(77, k'T')
print abs(k1long - k2long)  # EXPECT: 3

if k1long > k2long:
    print k2long - k1long   # EXPECT: -3
    print k1long - k2long   # EXPECT: 3
else:
    print k1long - k2long
    print k2long - k1long

k1long, k2long = k2long, k1long
if k1long > k2long:
    print k2long - k1long   # EXPECT: -3
    print k1long - k2long   # EXPECT: 3
else:
    print k1long - k2long
    print k2long - k1long

print k1 << s'G'   # EXPECT: CGTAG
print k1 >> s'G'   # EXPECT: GACGT
print k1 << ~s'G'  # EXPECT: CGTAC
print k1 >> ~s'G'  # EXPECT: CACGT

K100 = Kmer[100]
K1 = Kmer[1]
print K100() |> base(-1, K1(s'C')) |> base(98, s'G') |> base(0, K1(s'T'))
# EXPECT: TAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGC

k3 = K100()
h1 = hash(k3)
h2 = hash(k3 |> base(0, k'T'))
h3 = hash(k3 |> base(99, k'T'))
h4 = hash(k3 |> base(0, k'T') |> base(99, k'T'))
# bases on both ends should be involved in k-mer hash:
print h1 == h2  # EXPECT: False
print h1 == h3  # EXPECT: False
print h1 == h4  # EXPECT: False
print h2 == h3  # EXPECT: False
print h2 == h4  # EXPECT: False
print h3 == h4  # EXPECT: False

print k'ACGT' in s'GGACGTGG'  # EXPECT: True
print k'ACGT' in s'GGAGTGG'   # EXPECT: False
print s'ACGT' in k'GGACGTGG'  # EXPECT: True
print s'ACGT' in k'GGAGTGG'   # EXPECT: False

@test
def test_N():
    assert s''.N() == False
    assert s'ACGTacgt'.N() == False
    assert s'ACGTNacgt'.N() == True
    assert s'N'.N() == True
    assert s'AAN'.N() == True
    assert s'NAA'.N() == True
    assert s'ANA'.N() == True
test_N()

@test
def test_base_counts():
    assert s''.bases == (0,0,0,0,0)
    assert s'A'.bases == (1,0,0,0,0)
    assert s'C'.bases == (0,1,0,0,0)
    assert s'G'.bases == (0,0,1,0,0)
    assert s'T'.bases == (0,0,0,1,0)
    assert s'N'.bases == (0,0,0,0,1)
    assert s'AAGAGACTNTN'.bases == (4,1,2,2,2)
    assert (s'A'.bases + s'G'.bases) - s'A'.bases == s'G'.bases
    assert s'A'.bases.add(T=True) - s'A'.bases == s'T'.bases
test_base_counts()

@test
def test_kmer_revcomp(path: str, K: Static[int]):
    v1 = []
    v2 = []

    for x in FASTA(path, fai=False):
        for y in x.seq.split(k=K, step=1):
            if not y.N():
                v1.append(str(~y).upper())

    for x in FASTA(path, fai=False):
        for y in x.seq.kmers(step=1, k=K):
            v2.append(str(~y).upper())

    '''
    if len(v1) == len(v2):
        for i in range(len(v1)):
            if v1[i] != v2[i]:
                print i, v1[i], v2[i]
    '''

    assert v1 == v2

testfile = 'test/data/MT-human.fa'
test_kmer_revcomp(testfile, 1)
test_kmer_revcomp(testfile, 2)
test_kmer_revcomp(testfile, 3)
test_kmer_revcomp(testfile, 4)
test_kmer_revcomp(testfile, 5)
test_kmer_revcomp(testfile, 25)
test_kmer_revcomp(testfile, 32)
test_kmer_revcomp(testfile, 31)
test_kmer_revcomp(testfile, 33)
test_kmer_revcomp(testfile, 64)
test_kmer_revcomp(testfile, 65)
test_kmer_revcomp(testfile, 129)
test_kmer_revcomp(testfile, 1000)

@test
def test_kmer_iteration(path: str, K: Static[int]):
    for rc in (True, False):
        for step in range(1, K + 2):
            v1 = []
            v2 = []

            for x in FASTA(path, fai=False):
                for y in (~(x.seq) if rc else x.seq).split(k=K, step=step):
                    if not y.N():
                        v1.append(str(y).upper())

            for x in FASTA(path, fai=False):
                for y in (~(x.seq) if rc else x.seq).kmers(step=step, k=K):
                    v2.append(str(y).upper())

            assert v1 == v2

testfile = 'test/data/MT-human.fa'
test_kmer_iteration(testfile, 1)
test_kmer_iteration(testfile, 2)
test_kmer_iteration(testfile, 3)
test_kmer_iteration(testfile, 4)
test_kmer_iteration(testfile, 5)
test_kmer_iteration(testfile, 25)
test_kmer_iteration(testfile, 32)
test_kmer_iteration(testfile, 31)
test_kmer_iteration(testfile, 33)
test_kmer_iteration(testfile, 64)
test_kmer_iteration(testfile, 65)
test_kmer_iteration(testfile, 129)
