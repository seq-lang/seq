from bio import *

FASTQ('test/data/seqs.fastq') |> seqs |> echo
# EXPECT: GTGCACAGAAAAAAAGGTTAAATTGAAAAGTAAATATGATAGAAATGATTGCAAATGTTGGCAAACCACTAAATCGACTAAAACTTGAATAAAAGTAAAAATCATCCATGTCATTTATAAAGCGACTCAACTAAAGCATAAGGATATAAGA
# EXPECT: TATATTCGTGTCCACTTCATGATTCCATTCAATTCCATCTAATGTTGATTCCATTTGATTCCATTTGATGATTCAGTTCGATTCCTTGCAATGATTCCCTACGATTCCTTTCTATGATGATTCCATTCGATTCCATTCATTGATGATTTCA
# EXPECT: CCTGCATCACGACGACCGCCGCCACCGTCAGCCCAGCCCACCCACTGCACTCCACCCTCAGCACCACAGTGAGCCCGAATACCACCACCCCCCCCACCACCACCACCACACAAACAACCACCACCACCACAACCACCCTCACCACCATCAC
# EXPECT: TCAATTCGATTCTATTCGATGATGATTCCATTGGATTTCACTTGATGATTCTATTCGATTCCATTCAATGATGATTCACTTCTCGTCCATTGGATGATTCCATTTCATTCCATTCTATGATGATTCCATTCGATTCCATTTGATGATAATT

print '-'  # EXPECT: -
FASTA('test/data/seqs.fasta') |> seqs |> echo
# EXPECT: TCCTCCCCGTTCGCTGGACCCTTGGTCTATCTAGTCAAGAATTAACTCCCATTTAGTTGGCTGTTCGTCGATTACCCCTACTGGACCGTCGCAACGGCTCACGTGGAGGTCTTAGACCAAGAAAGCTACTGTATGCGGGGATATCACATCAGATTGCCAGGCGAGCAGCTCTAGCGTGACACGCCTAGACTCATTCGTTGTTCCTTGTCAATCCCAGGGGTCTCCACAGGGAGTGGATCGAGCTAATCACCGTTTCGAGTCCGTCAGGCGGAGAGTAGCAGTAAGTACAAACTTCTGCTAGTCGCTCTGCCACAACGTAGCCACCTAAGATTAACCCTGGAATTGTCCGGGCGGCATGATCCATCGAGGAGTTAGCGGGGACAGGGAGTTACCAGTCGAGACGTCCATGGTGGTGCTGCAATCCATGGATACCATCTCCTTGCCATTCCTAGGGACATCG
# EXPECT: TATGGGGTAGCATCATTAAGTGGGGAGGTAGACCAGGAGTTCGGTTCCCGGAGTTTCGTTAGTTCAGGTAGCGTGACCTCGTCTTAGTATGCAGTCGTGAAATAATAGACATTTCTGCCTGTCAGGTTGCACTAATCACACCCAGGCTGTTAACGAGGCGGCTCGTAGTATAAACGCTTTGGACTAGACTCGATACCTAGCGGCGCGCATTGATAAATGGTGCATCTATAGTAAAAGGCGTCCCAACCTGGGGACTTAGCGTTGAATACCCGTGCAAGGATCTCTAATCGGTTCTCAATGGCTGCCTGCTCTTTCTCTAAACGAGACTCTAATATCATGTGTGGTCCTTGCTTTCGGTCGAGAAAAAGCCTTTGATCGCATCCCAAACCGACATCTAAAAGCTTCATGTATGTCGGCAGCGAAAAAACGACCAAATAGAAGTCCCCTAACGGAGAATAGGCCGCCCACGACAGAACACCGCTTCGTCCT
# EXPECT: CCCGCTAGCCGTGCCTGATCCTCAACCAAGCTGGGTAAAGACAACCGTCTAATCATTAACTTACGTTGTTACGTCATTTTGCGCTTAAAATTGTCGCACCGGAATCCGTCGAGACTTCCCGAGACATGTCCCCTTAATAAATGTACGGTGTGACCTAACGATCGGATCACCGTCCGTGCTAAAACACACAACCGCTGCGTGACACCGACCGAACGTTACCGAAGGCTGTCCGCCTAACATCTATATTTGGCGGTAAAGAGGCGGTTCCGGCGGACTATAAAGTCACAGGCCACTGTTTCTTTGCAAGATATGGCTCTCTGTCAGGACCGCCCCCTAGGGTCAGCTCAAATAAGCTTGTCCCGGACTCCGTACTTCCAACAGAAAGGTGACCGCTACATTCTGCTATTGACCCCTCACACAACGTTCCCCCGCATGGCGTACGTGTTACCAGGGCGGTTGCGGCCTTACGTCGCCATAAGCACGTATATAAGTCACCCACT
# EXPECT: TGCCGTGACCACCCCGCGAGAATCTCATAATGATATCTCCAATCGAGTA

print '-'  # EXPECT: -
'test/data/seqs.txt' |> seqs |> echo
# EXPECT: GTCCTAAATTGTTGTACGAAAGAACGTGACAGAGGGAAGGCACTCGGCGTGGCTGAGAGTTGCGGCTACCGCACTGTTACACGGTATGCTAGTTAAAACTTGGAAGAGGGCAAAGCGACTATGCACTGTGGCTGGATCGCTATGACCCCTG
# EXPECT: GACGTGTGGAGTAAGCATAAGTCACTATATCAACAAGCCCGCAACAATACTTGTAGAGAATCTGAACCGGCTAGGCGCTCAACGCTACAGGGTGTCATTTCGTACCCCTAACACTGCTATTCGTTTCGGAAGAGGCACCTCGGTGAAGAAA
# EXPECT: GAAGCTGGAGCGAAGTCGATGTTTTTGCTGTACCAGGCGTGAGTTTGTAGATAAGCGGTCTGATACCGCAGAAGCAGGGTACAGTATAGACACGGGTTAAGTCGAGAGACAGGTCAAACAATTAACGCCAAAGAGGTCCCAGTCAGGAGCT
# EXPECT: AATGAAGTGGGGTAATTATGATTCTATAAATTTGTAGGGAAATGGGTTTAGCGCCTGAACGACAAGCGATAGATTATGGGCTGAGGAATAGTAGTTACTCCGCGGGCGGCCGCATTCGATATTTTGCGTCATCATAGATCAAGTTTCCGGG

print '-'  # EXPECT: -
FASTQ('test/data/seqs.fastq.gz') |> seqs |> echo
# EXPECT: GTGCACAGAAAAAAAGGTTAAATTGAAAAGTAAATATGATAGAAATGATTGCAAATGTTGGCAAACCACTAAATCGACTAAAACTTGAATAAAAGTAAAAATCATCCATGTCATTTATAAAGCGACTCAACTAAAGCATAAGGATATAAGA
# EXPECT: TATATTCGTGTCCACTTCATGATTCCATTCAATTCCATCTAATGTTGATTCCATTTGATTCCATTTGATGATTCAGTTCGATTCCTTGCAATGATTCCCTACGATTCCTTTCTATGATGATTCCATTCGATTCCATTCATTGATGATTTCA
# EXPECT: CCTGCATCACGACGACCGCCGCCACCGTCAGCCCAGCCCACCCACTGCACTCCACCCTCAGCACCACAGTGAGCCCGAATACCACCACCCCCCCCACCACCACCACCACACAAACAACCACCACCACCACAACCACCCTCACCACCATCAC
# EXPECT: TCAATTCGATTCTATTCGATGATGATTCCATTGGATTTCACTTGATGATTCTATTCGATTCCATTCAATGATGATTCACTTCTCGTCCATTGGATGATTCCATTTCATTCCATTCTATGATGATTCCATTCGATTCCATTTGATGATAATT

print '-'  # EXPECT: -
'test/data/seqs.txt.gz' |> seqs |> echo
# EXPECT: GTCCTAAATTGTTGTACGAAAGAACGTGACAGAGGGAAGGCACTCGGCGTGGCTGAGAGTTGCGGCTACCGCACTGTTACACGGTATGCTAGTTAAAACTTGGAAGAGGGCAAAGCGACTATGCACTGTGGCTGGATCGCTATGACCCCTG
# EXPECT: GACGTGTGGAGTAAGCATAAGTCACTATATCAACAAGCCCGCAACAATACTTGTAGAGAATCTGAACCGGCTAGGCGCTCAACGCTACAGGGTGTCATTTCGTACCCCTAACACTGCTATTCGTTTCGGAAGAGGCACCTCGGTGAAGAAA
# EXPECT: GAAGCTGGAGCGAAGTCGATGTTTTTGCTGTACCAGGCGTGAGTTTGTAGATAAGCGGTCTGATACCGCAGAAGCAGGGTACAGTATAGACACGGGTTAAGTCGAGAGACAGGTCAAACAATTAACGCCAAAGAGGTCCCAGTCAGGAGCT
# EXPECT: AATGAAGTGGGGTAATTATGATTCTATAAATTTGTAGGGAAATGGGTTTAGCGCCTGAACGACAAGCGATAGATTATGGGCTGAGGAATAGTAGTTACTCCGCGGGCGGCCGCATTCGATATTTTGCGTCATCATAGATCAAGTTTCCGGG

print '-'  # EXPECT: -
FASTQ('test/data/seqs.fastq', copy=False) |> seqs |> echo
# EXPECT: GTGCACAGAAAAAAAGGTTAAATTGAAAAGTAAATATGATAGAAATGATTGCAAATGTTGGCAAACCACTAAATCGACTAAAACTTGAATAAAAGTAAAAATCATCCATGTCATTTATAAAGCGACTCAACTAAAGCATAAGGATATAAGA
# EXPECT: TATATTCGTGTCCACTTCATGATTCCATTCAATTCCATCTAATGTTGATTCCATTTGATTCCATTTGATGATTCAGTTCGATTCCTTGCAATGATTCCCTACGATTCCTTTCTATGATGATTCCATTCGATTCCATTCATTGATGATTTCA
# EXPECT: CCTGCATCACGACGACCGCCGCCACCGTCAGCCCAGCCCACCCACTGCACTCCACCCTCAGCACCACAGTGAGCCCGAATACCACCACCCCCCCCACCACCACCACCACACAAACAACCACCACCACCACAACCACCCTCACCACCATCAC
# EXPECT: TCAATTCGATTCTATTCGATGATGATTCCATTGGATTTCACTTGATGATTCTATTCGATTCCATTCAATGATGATTCACTTCTCGTCCATTGGATGATTCCATTTCATTCCATTCTATGATGATTCCATTCGATTCCATTTGATGATAATT

print '-'  # EXPECT: -
FASTA('test/data/seqs.fasta', copy=False) |> seqs |> echo
# EXPECT: TCCTCCCCGTTCGCTGGACCCTTGGTCTATCTAGTCAAGAATTAACTCCCATTTAGTTGGCTGTTCGTCGATTACCCCTACTGGACCGTCGCAACGGCTCACGTGGAGGTCTTAGACCAAGAAAGCTACTGTATGCGGGGATATCACATCAGATTGCCAGGCGAGCAGCTCTAGCGTGACACGCCTAGACTCATTCGTTGTTCCTTGTCAATCCCAGGGGTCTCCACAGGGAGTGGATCGAGCTAATCACCGTTTCGAGTCCGTCAGGCGGAGAGTAGCAGTAAGTACAAACTTCTGCTAGTCGCTCTGCCACAACGTAGCCACCTAAGATTAACCCTGGAATTGTCCGGGCGGCATGATCCATCGAGGAGTTAGCGGGGACAGGGAGTTACCAGTCGAGACGTCCATGGTGGTGCTGCAATCCATGGATACCATCTCCTTGCCATTCCTAGGGACATCG
# EXPECT: TATGGGGTAGCATCATTAAGTGGGGAGGTAGACCAGGAGTTCGGTTCCCGGAGTTTCGTTAGTTCAGGTAGCGTGACCTCGTCTTAGTATGCAGTCGTGAAATAATAGACATTTCTGCCTGTCAGGTTGCACTAATCACACCCAGGCTGTTAACGAGGCGGCTCGTAGTATAAACGCTTTGGACTAGACTCGATACCTAGCGGCGCGCATTGATAAATGGTGCATCTATAGTAAAAGGCGTCCCAACCTGGGGACTTAGCGTTGAATACCCGTGCAAGGATCTCTAATCGGTTCTCAATGGCTGCCTGCTCTTTCTCTAAACGAGACTCTAATATCATGTGTGGTCCTTGCTTTCGGTCGAGAAAAAGCCTTTGATCGCATCCCAAACCGACATCTAAAAGCTTCATGTATGTCGGCAGCGAAAAAACGACCAAATAGAAGTCCCCTAACGGAGAATAGGCCGCCCACGACAGAACACCGCTTCGTCCT
# EXPECT: CCCGCTAGCCGTGCCTGATCCTCAACCAAGCTGGGTAAAGACAACCGTCTAATCATTAACTTACGTTGTTACGTCATTTTGCGCTTAAAATTGTCGCACCGGAATCCGTCGAGACTTCCCGAGACATGTCCCCTTAATAAATGTACGGTGTGACCTAACGATCGGATCACCGTCCGTGCTAAAACACACAACCGCTGCGTGACACCGACCGAACGTTACCGAAGGCTGTCCGCCTAACATCTATATTTGGCGGTAAAGAGGCGGTTCCGGCGGACTATAAAGTCACAGGCCACTGTTTCTTTGCAAGATATGGCTCTCTGTCAGGACCGCCCCCTAGGGTCAGCTCAAATAAGCTTGTCCCGGACTCCGTACTTCCAACAGAAAGGTGACCGCTACATTCTGCTATTGACCCCTCACACAACGTTCCCCCGCATGGCGTACGTGTTACCAGGGCGGTTGCGGCCTTACGTCGCCATAAGCACGTATATAAGTCACCCACT
# EXPECT: TGCCGTGACCACCCCGCGAGAATCTCATAATGATATCTCCAATCGAGTA

print '-'  # EXPECT: -
Seqs('test/data/seqs.txt', copy=False) |> seqs |> echo
# EXPECT: GTCCTAAATTGTTGTACGAAAGAACGTGACAGAGGGAAGGCACTCGGCGTGGCTGAGAGTTGCGGCTACCGCACTGTTACACGGTATGCTAGTTAAAACTTGGAAGAGGGCAAAGCGACTATGCACTGTGGCTGGATCGCTATGACCCCTG
# EXPECT: GACGTGTGGAGTAAGCATAAGTCACTATATCAACAAGCCCGCAACAATACTTGTAGAGAATCTGAACCGGCTAGGCGCTCAACGCTACAGGGTGTCATTTCGTACCCCTAACACTGCTATTCGTTTCGGAAGAGGCACCTCGGTGAAGAAA
# EXPECT: GAAGCTGGAGCGAAGTCGATGTTTTTGCTGTACCAGGCGTGAGTTTGTAGATAAGCGGTCTGATACCGCAGAAGCAGGGTACAGTATAGACACGGGTTAAGTCGAGAGACAGGTCAAACAATTAACGCCAAAGAGGTCCCAGTCAGGAGCT
# EXPECT: AATGAAGTGGGGTAATTATGATTCTATAAATTTGTAGGGAAATGGGTTTAGCGCCTGAACGACAAGCGATAGATTATGGGCTGAGGAATAGTAGTTACTCCGCGGGCGGCCGCATTCGATATTTTGCGTCATCATAGATCAAGTTTCCGGG

print '-'  # EXPECT: -
FASTQ('test/data/seqs.fastq.gz', copy=False) |> seqs |> echo
# EXPECT: GTGCACAGAAAAAAAGGTTAAATTGAAAAGTAAATATGATAGAAATGATTGCAAATGTTGGCAAACCACTAAATCGACTAAAACTTGAATAAAAGTAAAAATCATCCATGTCATTTATAAAGCGACTCAACTAAAGCATAAGGATATAAGA
# EXPECT: TATATTCGTGTCCACTTCATGATTCCATTCAATTCCATCTAATGTTGATTCCATTTGATTCCATTTGATGATTCAGTTCGATTCCTTGCAATGATTCCCTACGATTCCTTTCTATGATGATTCCATTCGATTCCATTCATTGATGATTTCA
# EXPECT: CCTGCATCACGACGACCGCCGCCACCGTCAGCCCAGCCCACCCACTGCACTCCACCCTCAGCACCACAGTGAGCCCGAATACCACCACCCCCCCCACCACCACCACCACACAAACAACCACCACCACCACAACCACCCTCACCACCATCAC
# EXPECT: TCAATTCGATTCTATTCGATGATGATTCCATTGGATTTCACTTGATGATTCTATTCGATTCCATTCAATGATGATTCACTTCTCGTCCATTGGATGATTCCATTTCATTCCATTCTATGATGATTCCATTCGATTCCATTTGATGATAATT

print '-'  # EXPECT: -
Seqs('test/data/seqs.txt.gz', copy=False) |> seqs |> echo
# EXPECT: GTCCTAAATTGTTGTACGAAAGAACGTGACAGAGGGAAGGCACTCGGCGTGGCTGAGAGTTGCGGCTACCGCACTGTTACACGGTATGCTAGTTAAAACTTGGAAGAGGGCAAAGCGACTATGCACTGTGGCTGGATCGCTATGACCCCTG
# EXPECT: GACGTGTGGAGTAAGCATAAGTCACTATATCAACAAGCCCGCAACAATACTTGTAGAGAATCTGAACCGGCTAGGCGCTCAACGCTACAGGGTGTCATTTCGTACCCCTAACACTGCTATTCGTTTCGGAAGAGGCACCTCGGTGAAGAAA
# EXPECT: GAAGCTGGAGCGAAGTCGATGTTTTTGCTGTACCAGGCGTGAGTTTGTAGATAAGCGGTCTGATACCGCAGAAGCAGGGTACAGTATAGACACGGGTTAAGTCGAGAGACAGGTCAAACAATTAACGCCAAAGAGGTCCCAGTCAGGAGCT
# EXPECT: AATGAAGTGGGGTAATTATGATTCTATAAATTTGTAGGGAAATGGGTTTAGCGCCTGAACGACAAGCGATAGATTATGGGCTGAGGAATAGTAGTTACTCCGCGGGCGGCCGCATTCGATATTTTGCGTCATCATAGATCAAGTTTCCGGG

print '-'  # EXPECT: -
SAM('test/data/toy.sam') |> seqs |> echo
# EXPECT: TTAGATAAAGAGGATACTG
# EXPECT: AAAAGATAAGGGATAAA
# EXPECT: AGCTAA
# EXPECT: ATAGCTCTCAGC
# EXPECT: TAGGC
# EXPECT: CAGCGCCAT
# EXPECT: AGGTTTTATAAAACAAATAA
# EXPECT: GGTTTTATAAAACAAATAATT
# EXPECT: TTATAAAACAAATAATTAAGTCTACA
# EXPECT: CAAATAATTAAGTCTACAGAGCAAC
# EXPECT: AATAATTAAGTCTACAGAGCAACT
# EXPECT: TAATTAAGTCTACAGAGCAACTA

print '-'  # EXPECT: -
BAM('test/data/toy.bam') |> seqs |> echo
# EXPECT: TTAGATAAAGAGGATACTG
# EXPECT: AAAAGATAAGGGATAAA
# EXPECT: AGCTAA
# EXPECT: ATAGCTCTCAGC
# EXPECT: TAGGC
# EXPECT: CAGCGCCAT
# EXPECT: AGGTTTTATAAAACAAATAA
# EXPECT: GGTTTTATAAAACAAATAATT
# EXPECT: TTATAAAACAAATAATTAAGTCTACA
# EXPECT: CAAATAATTAAGTCTACAGAGCAAC
# EXPECT: AATAATTAAGTCTACAGAGCAACT
# EXPECT: TAATTAAGTCTACAGAGCAACTA

print '-'  # EXPECT: -
CRAM('test/data/toy.cram') |> seqs |> echo
# EXPECT: TTAGATAAAGAGGATACTG
# EXPECT: AAAAGATAAGGGATAAA
# EXPECT: AGCTAA
# EXPECT: ATAGCTCTCAGC
# EXPECT: TAGGC
# EXPECT: CAGCGCCAT
# EXPECT: AGGTTTTATAAAACAAATAA
# EXPECT: GGTTTTATAAAACAAATAATT
# EXPECT: TTATAAAACAAATAATTAAGTCTACA
# EXPECT: CAAATAATTAAGTCTACAGAGCAAC
# EXPECT: AATAATTAAGTCTACAGAGCAACT
# EXPECT: TAATTAAGTCTACAGAGCAACTA

def print1(r):
    print r.name
    print r.read
    print r.qual

print '-'  # EXPECT: -
FASTQ('test/data/seqs.fastq') |> iter |> print1
# EXPECT: SL-HXF:348:HKLFWCCXX:1:2101:15676:57231:CACCAAAAGTACATGA
# EXPECT: GTGCACAGAAAAAAAGGTTAAATTGAAAAGTAAATATGATAGAAATGATTGCAAATGTTGGCAAACCACTAAATCGACTAAAACTTGAATAAAAGTAAAAATCATCCATGTCATTTATAAAGCGACTCAACTAAAGCATAAGGATATAAGA
# EXPECT: AAFFFKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKFKKKKKKKKKKKKKFKKKKKKKFKKFKKKKFKKKFK<,AAAFKFKKFAFKKA,,,A<FFAFFK<AAKFFKKKFK,<,,7F<
# EXPECT: SL-HXF:348:HKLFWCCXX:1:2121:24495:55877:CACCAAAAGTACATGA
# EXPECT: TATATTCGTGTCCACTTCATGATTCCATTCAATTCCATCTAATGTTGATTCCATTTGATTCCATTTGATGATTCAGTTCGATTCCTTGCAATGATTCCCTACGATTCCTTTCTATGATGATTCCATTCGATTCCATTCATTGATGATTTCA
# EXPECT: AAFFFKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKFKKKKKKKKKKKKKKFKKKKKKKKKKKKFKKKKKKKKKFFK7AAFKKFKKKKKFAKKKFKKFKKKF7A7F<<KKF,
# EXPECT: SL-HXF:348:HKLFWCCXX:1:2220:28361:38491:CACCAAAAGTACATGA
# EXPECT: CCTGCATCACGACGACCGCCGCCACCGTCAGCCCAGCCCACCCACTGCACTCCACCCTCAGCACCACAGTGAGCCCGAATACCACCACCCCCCCCACCACCACCACCACACAAACAACCACCACCACCACAACCACCCTCACCACCATCAC
# EXPECT: ,A,<,A,F,,,,,,,,,,(((,,(<((7,A,A,(,((((,,(7,,,,,,F,,FK,F7<,,,7F,FFF7,,,77,,(((,,,7F,FF,A77AF7FK(((,<,<,,,,,<<,,,,,,,<A7AF,7A<KKA<F,,,7,,<(,,,,,,,,,,,,,
# EXPECT: SL-HXF:348:HKLFWCCXX:4:1106:4553:37893:CACCAAAAGTACATGA
# EXPECT: TCAATTCGATTCTATTCGATGATGATTCCATTGGATTTCACTTGATGATTCTATTCGATTCCATTCAATGATGATTCACTTCTCGTCCATTGGATGATTCCATTTCATTCCATTCTATGATGATTCCATTCGATTCCATTTGATGATAATT
# EXPECT: AAFFFKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKFKKKKFKKKKKKFKKK7AFFKAFKKKKK,FKKFKAFFA7<<,FFAFKFAF7FKK77<,,,,,,,,,,<F7A,<AK,AFFK<<KKF<,AA7<F,,7

print '-'  # EXPECT: -
FASTQ('test/data/seqs.fastq.gz') |> iter |> print1
# EXPECT: SL-HXF:348:HKLFWCCXX:1:2101:15676:57231:CACCAAAAGTACATGA
# EXPECT: GTGCACAGAAAAAAAGGTTAAATTGAAAAGTAAATATGATAGAAATGATTGCAAATGTTGGCAAACCACTAAATCGACTAAAACTTGAATAAAAGTAAAAATCATCCATGTCATTTATAAAGCGACTCAACTAAAGCATAAGGATATAAGA
# EXPECT: AAFFFKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKFKKKKKKKKKKKKKFKKKKKKKFKKFKKKKFKKKFK<,AAAFKFKKFAFKKA,,,A<FFAFFK<AAKFFKKKFK,<,,7F<
# EXPECT: SL-HXF:348:HKLFWCCXX:1:2121:24495:55877:CACCAAAAGTACATGA
# EXPECT: TATATTCGTGTCCACTTCATGATTCCATTCAATTCCATCTAATGTTGATTCCATTTGATTCCATTTGATGATTCAGTTCGATTCCTTGCAATGATTCCCTACGATTCCTTTCTATGATGATTCCATTCGATTCCATTCATTGATGATTTCA
# EXPECT: AAFFFKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKFKKKKKKKKKKKKKKFKKKKKKKKKKKKFKKKKKKKKKFFK7AAFKKFKKKKKFAKKKFKKFKKKF7A7F<<KKF,
# EXPECT: SL-HXF:348:HKLFWCCXX:1:2220:28361:38491:CACCAAAAGTACATGA
# EXPECT: CCTGCATCACGACGACCGCCGCCACCGTCAGCCCAGCCCACCCACTGCACTCCACCCTCAGCACCACAGTGAGCCCGAATACCACCACCCCCCCCACCACCACCACCACACAAACAACCACCACCACCACAACCACCCTCACCACCATCAC
# EXPECT: ,A,<,A,F,,,,,,,,,,(((,,(<((7,A,A,(,((((,,(7,,,,,,F,,FK,F7<,,,7F,FFF7,,,77,,(((,,,7F,FF,A77AF7FK(((,<,<,,,,,<<,,,,,,,<A7AF,7A<KKA<F,,,7,,<(,,,,,,,,,,,,,
# EXPECT: SL-HXF:348:HKLFWCCXX:4:1106:4553:37893:CACCAAAAGTACATGA
# EXPECT: TCAATTCGATTCTATTCGATGATGATTCCATTGGATTTCACTTGATGATTCTATTCGATTCCATTCAATGATGATTCACTTCTCGTCCATTGGATGATTCCATTTCATTCCATTCTATGATGATTCCATTCGATTCCATTTGATGATAATT
# EXPECT: AAFFFKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKFKKKKFKKKKKKFKKK7AFFKAFKKKKK,FKKFKAFFA7<<,FFAFKFAF7FKK77<,,,,,,,,,,<F7A,<AK,AFFK<<KKF<,AA7<F,,7

print '-'  # EXPECT: -
FASTQ('test/data/seqs.fastq', gzip=False, validate=False) |> iter |> print1
# EXPECT: SL-HXF:348:HKLFWCCXX:1:2101:15676:57231:CACCAAAAGTACATGA
# EXPECT: GTGCACAGAAAAAAAGGTTAAATTGAAAAGTAAATATGATAGAAATGATTGCAAATGTTGGCAAACCACTAAATCGACTAAAACTTGAATAAAAGTAAAAATCATCCATGTCATTTATAAAGCGACTCAACTAAAGCATAAGGATATAAGA
# EXPECT: AAFFFKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKFKKKKKKKKKKKKKFKKKKKKKFKKFKKKKFKKKFK<,AAAFKFKKFAFKKA,,,A<FFAFFK<AAKFFKKKFK,<,,7F<
# EXPECT: SL-HXF:348:HKLFWCCXX:1:2121:24495:55877:CACCAAAAGTACATGA
# EXPECT: TATATTCGTGTCCACTTCATGATTCCATTCAATTCCATCTAATGTTGATTCCATTTGATTCCATTTGATGATTCAGTTCGATTCCTTGCAATGATTCCCTACGATTCCTTTCTATGATGATTCCATTCGATTCCATTCATTGATGATTTCA
# EXPECT: AAFFFKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKFKKKKKKKKKKKKKKFKKKKKKKKKKKKFKKKKKKKKKFFK7AAFKKFKKKKKFAKKKFKKFKKKF7A7F<<KKF,
# EXPECT: SL-HXF:348:HKLFWCCXX:1:2220:28361:38491:CACCAAAAGTACATGA
# EXPECT: CCTGCATCACGACGACCGCCGCCACCGTCAGCCCAGCCCACCCACTGCACTCCACCCTCAGCACCACAGTGAGCCCGAATACCACCACCCCCCCCACCACCACCACCACACAAACAACCACCACCACCACAACCACCCTCACCACCATCAC
# EXPECT: ,A,<,A,F,,,,,,,,,,(((,,(<((7,A,A,(,((((,,(7,,,,,,F,,FK,F7<,,,7F,FFF7,,,77,,(((,,,7F,FF,A77AF7FK(((,<,<,,,,,<<,,,,,,,<A7AF,7A<KKA<F,,,7,,<(,,,,,,,,,,,,,
# EXPECT: SL-HXF:348:HKLFWCCXX:4:1106:4553:37893:CACCAAAAGTACATGA
# EXPECT: TCAATTCGATTCTATTCGATGATGATTCCATTGGATTTCACTTGATGATTCTATTCGATTCCATTCAATGATGATTCACTTCTCGTCCATTGGATGATTCCATTTCATTCCATTCTATGATGATTCCATTCGATTCCATTTGATGATAATT
# EXPECT: AAFFFKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKFKKKKFKKKKKKFKKK7AFFKAFKKKKK,FKKFKAFFA7<<,FFAFKFAF7FKK77<,,,,,,,,,,<F7A,<AK,AFFK<<KKF<,AA7<F,,7

def print2(r):
    print r.name
    print r.seq

print '-'  # EXPECT: -
FASTA('test/data/seqs.fasta') |> iter |> print2
# EXPECT: chrA
# EXPECT: TCCTCCCCGTTCGCTGGACCCTTGGTCTATCTAGTCAAGAATTAACTCCCATTTAGTTGGCTGTTCGTCGATTACCCCTACTGGACCGTCGCAACGGCTCACGTGGAGGTCTTAGACCAAGAAAGCTACTGTATGCGGGGATATCACATCAGATTGCCAGGCGAGCAGCTCTAGCGTGACACGCCTAGACTCATTCGTTGTTCCTTGTCAATCCCAGGGGTCTCCACAGGGAGTGGATCGAGCTAATCACCGTTTCGAGTCCGTCAGGCGGAGAGTAGCAGTAAGTACAAACTTCTGCTAGTCGCTCTGCCACAACGTAGCCACCTAAGATTAACCCTGGAATTGTCCGGGCGGCATGATCCATCGAGGAGTTAGCGGGGACAGGGAGTTACCAGTCGAGACGTCCATGGTGGTGCTGCAATCCATGGATACCATCTCCTTGCCATTCCTAGGGACATCG
# EXPECT: chrB
# EXPECT: TATGGGGTAGCATCATTAAGTGGGGAGGTAGACCAGGAGTTCGGTTCCCGGAGTTTCGTTAGTTCAGGTAGCGTGACCTCGTCTTAGTATGCAGTCGTGAAATAATAGACATTTCTGCCTGTCAGGTTGCACTAATCACACCCAGGCTGTTAACGAGGCGGCTCGTAGTATAAACGCTTTGGACTAGACTCGATACCTAGCGGCGCGCATTGATAAATGGTGCATCTATAGTAAAAGGCGTCCCAACCTGGGGACTTAGCGTTGAATACCCGTGCAAGGATCTCTAATCGGTTCTCAATGGCTGCCTGCTCTTTCTCTAAACGAGACTCTAATATCATGTGTGGTCCTTGCTTTCGGTCGAGAAAAAGCCTTTGATCGCATCCCAAACCGACATCTAAAAGCTTCATGTATGTCGGCAGCGAAAAAACGACCAAATAGAAGTCCCCTAACGGAGAATAGGCCGCCCACGACAGAACACCGCTTCGTCCT
# EXPECT: chrC
# EXPECT: CCCGCTAGCCGTGCCTGATCCTCAACCAAGCTGGGTAAAGACAACCGTCTAATCATTAACTTACGTTGTTACGTCATTTTGCGCTTAAAATTGTCGCACCGGAATCCGTCGAGACTTCCCGAGACATGTCCCCTTAATAAATGTACGGTGTGACCTAACGATCGGATCACCGTCCGTGCTAAAACACACAACCGCTGCGTGACACCGACCGAACGTTACCGAAGGCTGTCCGCCTAACATCTATATTTGGCGGTAAAGAGGCGGTTCCGGCGGACTATAAAGTCACAGGCCACTGTTTCTTTGCAAGATATGGCTCTCTGTCAGGACCGCCCCCTAGGGTCAGCTCAAATAAGCTTGTCCCGGACTCCGTACTTCCAACAGAAAGGTGACCGCTACATTCTGCTATTGACCCCTCACACAACGTTCCCCCGCATGGCGTACGTGTTACCAGGGCGGTTGCGGCCTTACGTCGCCATAAGCACGTATATAAGTCACCCACT
# EXPECT: chrD
# EXPECT: TGCCGTGACCACCCCGCGAGAATCTCATAATGATATCTCCAATCGAGTA

print '-'  # EXPECT: -
FASTA('test/data/seqs.fasta', gzip=False, copy=False, validate=False, fai=False) |> iter |> print2
# EXPECT: chrA
# EXPECT: TCCTCCCCGTTCGCTGGACCCTTGGTCTATCTAGTCAAGAATTAACTCCCATTTAGTTGGCTGTTCGTCGATTACCCCTACTGGACCGTCGCAACGGCTCACGTGGAGGTCTTAGACCAAGAAAGCTACTGTATGCGGGGATATCACATCAGATTGCCAGGCGAGCAGCTCTAGCGTGACACGCCTAGACTCATTCGTTGTTCCTTGTCAATCCCAGGGGTCTCCACAGGGAGTGGATCGAGCTAATCACCGTTTCGAGTCCGTCAGGCGGAGAGTAGCAGTAAGTACAAACTTCTGCTAGTCGCTCTGCCACAACGTAGCCACCTAAGATTAACCCTGGAATTGTCCGGGCGGCATGATCCATCGAGGAGTTAGCGGGGACAGGGAGTTACCAGTCGAGACGTCCATGGTGGTGCTGCAATCCATGGATACCATCTCCTTGCCATTCCTAGGGACATCG
# EXPECT: chrB
# EXPECT: TATGGGGTAGCATCATTAAGTGGGGAGGTAGACCAGGAGTTCGGTTCCCGGAGTTTCGTTAGTTCAGGTAGCGTGACCTCGTCTTAGTATGCAGTCGTGAAATAATAGACATTTCTGCCTGTCAGGTTGCACTAATCACACCCAGGCTGTTAACGAGGCGGCTCGTAGTATAAACGCTTTGGACTAGACTCGATACCTAGCGGCGCGCATTGATAAATGGTGCATCTATAGTAAAAGGCGTCCCAACCTGGGGACTTAGCGTTGAATACCCGTGCAAGGATCTCTAATCGGTTCTCAATGGCTGCCTGCTCTTTCTCTAAACGAGACTCTAATATCATGTGTGGTCCTTGCTTTCGGTCGAGAAAAAGCCTTTGATCGCATCCCAAACCGACATCTAAAAGCTTCATGTATGTCGGCAGCGAAAAAACGACCAAATAGAAGTCCCCTAACGGAGAATAGGCCGCCCACGACAGAACACCGCTTCGTCCT
# EXPECT: chrC
# EXPECT: CCCGCTAGCCGTGCCTGATCCTCAACCAAGCTGGGTAAAGACAACCGTCTAATCATTAACTTACGTTGTTACGTCATTTTGCGCTTAAAATTGTCGCACCGGAATCCGTCGAGACTTCCCGAGACATGTCCCCTTAATAAATGTACGGTGTGACCTAACGATCGGATCACCGTCCGTGCTAAAACACACAACCGCTGCGTGACACCGACCGAACGTTACCGAAGGCTGTCCGCCTAACATCTATATTTGGCGGTAAAGAGGCGGTTCCGGCGGACTATAAAGTCACAGGCCACTGTTTCTTTGCAAGATATGGCTCTCTGTCAGGACCGCCCCCTAGGGTCAGCTCAAATAAGCTTGTCCCGGACTCCGTACTTCCAACAGAAAGGTGACCGCTACATTCTGCTATTGACCCCTCACACAACGTTCCCCCGCATGGCGTACGTGTTACCAGGGCGGTTGCGGCCTTACGTCGCCATAAGCACGTATATAAGTCACCCACT
# EXPECT: chrD
# EXPECT: TGCCGTGACCACCCCGCGAGAATCTCATAATGATATCTCCAATCGAGTA

def print3(r):
    print r.tid, r.locus.pos, r.name, r.read, r.cigar, r.endpos
    aux = r.aux('XX')
    if aux:
        print [aux.B2i(i) for i in range(aux.B_len)]
        print aux.tag_type

        try:
            print aux.B2f(0)
        except TypeError as e:
            print e.message

        try:
            print aux.B2i(99)
        except IndexError as e:
            print e.message

        try:
            print aux.Z
        except TypeError as e:
            print e.message

print '-'  # EXPECT: -
SAM('test/data/toy.sam') |> iter |> print3
# EXPECT: 0 6 r001 TTAGATAAAGAGGATACTG 8M4I4M1D3M 22
# EXPECT: [12561, 2, 20, 112]
# EXPECT: Array[int]
# EXPECT: aux tag not of array type 'f'
# EXPECT: aux array index out of range
# EXPECT: aux tag not of type 'Z'
# EXPECT: 0 8 r002 AAAAGATAAGGGATAAA 1S2I6M1P1I1P1I4M2I 18
# EXPECT: 0 8 r003 AGCTAA 5H6M 14
# EXPECT: 0 15 r004 ATAGCTCTCAGC 6M14N1I5M 40
# EXPECT: 0 28 r003 TAGGC 6H5M 33
# EXPECT: 0 36 r001 CAGCGCCAT 9M 45
# EXPECT: 1 0 x1 AGGTTTTATAAAACAAATAA 20M 20
# EXPECT: 1 1 x2 GGTTTTATAAAACAAATAATT 21M 22
# EXPECT: 1 5 x3 TTATAAAACAAATAATTAAGTCTACA 9M4I13M 27
# EXPECT: 1 9 x4 CAAATAATTAAGTCTACAGAGCAAC 25M 34
# EXPECT: 1 11 x5 AATAATTAAGTCTACAGAGCAACT 24M 35
# EXPECT: 1 13 x6 TAATTAAGTCTACAGAGCAACTA 23M 36

print '-'  # EXPECT: -
SAM('test/data/toy.sam', num_threads=2) |> iter |> print3
# EXPECT: 0 6 r001 TTAGATAAAGAGGATACTG 8M4I4M1D3M 22
# EXPECT: [12561, 2, 20, 112]
# EXPECT: Array[int]
# EXPECT: aux tag not of array type 'f'
# EXPECT: aux array index out of range
# EXPECT: aux tag not of type 'Z'
# EXPECT: 0 8 r002 AAAAGATAAGGGATAAA 1S2I6M1P1I1P1I4M2I 18
# EXPECT: 0 8 r003 AGCTAA 5H6M 14
# EXPECT: 0 15 r004 ATAGCTCTCAGC 6M14N1I5M 40
# EXPECT: 0 28 r003 TAGGC 6H5M 33
# EXPECT: 0 36 r001 CAGCGCCAT 9M 45
# EXPECT: 1 0 x1 AGGTTTTATAAAACAAATAA 20M 20
# EXPECT: 1 1 x2 GGTTTTATAAAACAAATAATT 21M 22
# EXPECT: 1 5 x3 TTATAAAACAAATAATTAAGTCTACA 9M4I13M 27
# EXPECT: 1 9 x4 CAAATAATTAAGTCTACAGAGCAAC 25M 34
# EXPECT: 1 11 x5 AATAATTAAGTCTACAGAGCAACT 24M 35
# EXPECT: 1 13 x6 TAATTAAGTCTACAGAGCAACTA 23M 36

print '-'  # EXPECT: -
BAM('test/data/toy.bam') |> iter |> print3
# EXPECT: 0 6 r001 TTAGATAAAGAGGATACTG 8M4I4M1D3M 22
# EXPECT: [12561, 2, 20, 112]
# EXPECT: Array[int]
# EXPECT: aux tag not of array type 'f'
# EXPECT: aux array index out of range
# EXPECT: aux tag not of type 'Z'
# EXPECT: 0 8 r002 AAAAGATAAGGGATAAA 1S2I6M1P1I1P1I4M2I 18
# EXPECT: 0 8 r003 AGCTAA 5H6M 14
# EXPECT: 0 15 r004 ATAGCTCTCAGC 6M14N1I5M 40
# EXPECT: 0 28 r003 TAGGC 6H5M 33
# EXPECT: 0 36 r001 CAGCGCCAT 9M 45
# EXPECT: 1 0 x1 AGGTTTTATAAAACAAATAA 20M 20
# EXPECT: 1 1 x2 GGTTTTATAAAACAAATAATT 21M 22
# EXPECT: 1 5 x3 TTATAAAACAAATAATTAAGTCTACA 9M4I13M 27
# EXPECT: 1 9 x4 CAAATAATTAAGTCTACAGAGCAAC 25M 34
# EXPECT: 1 11 x5 AATAATTAAGTCTACAGAGCAACT 24M 35
# EXPECT: 1 13 x6 TAATTAAGTCTACAGAGCAACTA 23M 36

print '-'  # EXPECT: -
BAM('test/data/toy.bam', num_threads=2) |> iter |> print3
# EXPECT: 0 6 r001 TTAGATAAAGAGGATACTG 8M4I4M1D3M 22
# EXPECT: [12561, 2, 20, 112]
# EXPECT: Array[int]
# EXPECT: aux tag not of array type 'f'
# EXPECT: aux array index out of range
# EXPECT: aux tag not of type 'Z'
# EXPECT: 0 8 r002 AAAAGATAAGGGATAAA 1S2I6M1P1I1P1I4M2I 18
# EXPECT: 0 8 r003 AGCTAA 5H6M 14
# EXPECT: 0 15 r004 ATAGCTCTCAGC 6M14N1I5M 40
# EXPECT: 0 28 r003 TAGGC 6H5M 33
# EXPECT: 0 36 r001 CAGCGCCAT 9M 45
# EXPECT: 1 0 x1 AGGTTTTATAAAACAAATAA 20M 20
# EXPECT: 1 1 x2 GGTTTTATAAAACAAATAATT 21M 22
# EXPECT: 1 5 x3 TTATAAAACAAATAATTAAGTCTACA 9M4I13M 27
# EXPECT: 1 9 x4 CAAATAATTAAGTCTACAGAGCAAC 25M 34
# EXPECT: 1 11 x5 AATAATTAAGTCTACAGAGCAACT 24M 35
# EXPECT: 1 13 x6 TAATTAAGTCTACAGAGCAACTA 23M 36

print '-'  # EXPECT: -
SAM('test/data/toy.sam', copy=False) |> iter |> print3
# EXPECT: 0 6 r001 TTAGATAAAGAGGATACTG 8M4I4M1D3M 22
# EXPECT: [12561, 2, 20, 112]
# EXPECT: Array[int]
# EXPECT: aux tag not of array type 'f'
# EXPECT: aux array index out of range
# EXPECT: aux tag not of type 'Z'
# EXPECT: 0 8 r002 AAAAGATAAGGGATAAA 1S2I6M1P1I1P1I4M2I 18
# EXPECT: 0 8 r003 AGCTAA 5H6M 14
# EXPECT: 0 15 r004 ATAGCTCTCAGC 6M14N1I5M 40
# EXPECT: 0 28 r003 TAGGC 6H5M 33
# EXPECT: 0 36 r001 CAGCGCCAT 9M 45
# EXPECT: 1 0 x1 AGGTTTTATAAAACAAATAA 20M 20
# EXPECT: 1 1 x2 GGTTTTATAAAACAAATAATT 21M 22
# EXPECT: 1 5 x3 TTATAAAACAAATAATTAAGTCTACA 9M4I13M 27
# EXPECT: 1 9 x4 CAAATAATTAAGTCTACAGAGCAAC 25M 34
# EXPECT: 1 11 x5 AATAATTAAGTCTACAGAGCAACT 24M 35
# EXPECT: 1 13 x6 TAATTAAGTCTACAGAGCAACTA 23M 36

print '-'  # EXPECT: -
BAM('test/data/toy.bam', copy=False) |> iter |> print3
# EXPECT: 0 6 r001 TTAGATAAAGAGGATACTG 8M4I4M1D3M 22
# EXPECT: [12561, 2, 20, 112]
# EXPECT: Array[int]
# EXPECT: aux tag not of array type 'f'
# EXPECT: aux array index out of range
# EXPECT: aux tag not of type 'Z'
# EXPECT: 0 8 r002 AAAAGATAAGGGATAAA 1S2I6M1P1I1P1I4M2I 18
# EXPECT: 0 8 r003 AGCTAA 5H6M 14
# EXPECT: 0 15 r004 ATAGCTCTCAGC 6M14N1I5M 40
# EXPECT: 0 28 r003 TAGGC 6H5M 33
# EXPECT: 0 36 r001 CAGCGCCAT 9M 45
# EXPECT: 1 0 x1 AGGTTTTATAAAACAAATAA 20M 20
# EXPECT: 1 1 x2 GGTTTTATAAAACAAATAATT 21M 22
# EXPECT: 1 5 x3 TTATAAAACAAATAATTAAGTCTACA 9M4I13M 27
# EXPECT: 1 9 x4 CAAATAATTAAGTCTACAGAGCAAC 25M 34
# EXPECT: 1 11 x5 AATAATTAAGTCTACAGAGCAACT 24M 35
# EXPECT: 1 13 x6 TAATTAAGTCTACAGAGCAACTA 23M 36

print '-'  # EXPECT: -
CRAM('test/data/toy.cram') |> iter |> print3
# EXPECT: 0 6 r001 TTAGATAAAGAGGATACTG 8M4I4M1D3M 22
# EXPECT: [12561, 2, 20, 112]
# EXPECT: Array[int]
# EXPECT: aux tag not of array type 'f'
# EXPECT: aux array index out of range
# EXPECT: aux tag not of type 'Z'
# EXPECT: 0 8 r002 AAAAGATAAGGGATAAA 1S2I6M1P1I1P1I4M2I 18
# EXPECT: 0 8 r003 AGCTAA 5H6M 14
# EXPECT: 0 15 r004 ATAGCTCTCAGC 6M14N1I5M 40
# EXPECT: 0 28 r003 TAGGC 6H5M 33
# EXPECT: 0 36 r001 CAGCGCCAT 9M 45
# EXPECT: 1 0 x1 AGGTTTTATAAAACAAATAA 20M 20
# EXPECT: 1 1 x2 GGTTTTATAAAACAAATAATT 21M 22
# EXPECT: 1 5 x3 TTATAAAACAAATAATTAAGTCTACA 9M4I13M 27
# EXPECT: 1 9 x4 CAAATAATTAAGTCTACAGAGCAAC 25M 34
# EXPECT: 1 11 x5 AATAATTAAGTCTACAGAGCAACT 24M 35
# EXPECT: 1 13 x6 TAATTAAGTCTACAGAGCAACTA 23M 36

print '-'  # EXPECT: -
CRAM('test/data/toy.cram', num_threads=2) |> iter |> print3
# EXPECT: 0 6 r001 TTAGATAAAGAGGATACTG 8M4I4M1D3M 22
# EXPECT: [12561, 2, 20, 112]
# EXPECT: Array[int]
# EXPECT: aux tag not of array type 'f'
# EXPECT: aux array index out of range
# EXPECT: aux tag not of type 'Z'
# EXPECT: 0 8 r002 AAAAGATAAGGGATAAA 1S2I6M1P1I1P1I4M2I 18
# EXPECT: 0 8 r003 AGCTAA 5H6M 14
# EXPECT: 0 15 r004 ATAGCTCTCAGC 6M14N1I5M 40
# EXPECT: 0 28 r003 TAGGC 6H5M 33
# EXPECT: 0 36 r001 CAGCGCCAT 9M 45
# EXPECT: 1 0 x1 AGGTTTTATAAAACAAATAA 20M 20
# EXPECT: 1 1 x2 GGTTTTATAAAACAAATAATT 21M 22
# EXPECT: 1 5 x3 TTATAAAACAAATAATTAAGTCTACA 9M4I13M 27
# EXPECT: 1 9 x4 CAAATAATTAAGTCTACAGAGCAAC 25M 34
# EXPECT: 1 11 x5 AATAATTAAGTCTACAGAGCAACT 24M 35
# EXPECT: 1 13 x6 TAATTAAGTCTACAGAGCAACTA 23M 36

print '-'  # EXPECT: -
BAM('test/data/toy.bam', 'ref2') |> iter |> print3
# EXPECT: 1 0 x1 AGGTTTTATAAAACAAATAA 20M 20
# EXPECT: 1 1 x2 GGTTTTATAAAACAAATAATT 21M 22
# EXPECT: 1 5 x3 TTATAAAACAAATAATTAAGTCTACA 9M4I13M 27
# EXPECT: 1 9 x4 CAAATAATTAAGTCTACAGAGCAAC 25M 34
# EXPECT: 1 11 x5 AATAATTAAGTCTACAGAGCAACT 24M 35
# EXPECT: 1 13 x6 TAATTAAGTCTACAGAGCAACTA 23M 36

print '-'  # EXPECT: -
BAM('test/data/toy.bam', 'ref2', copy=False) |> iter |> print3
# EXPECT: 1 0 x1 AGGTTTTATAAAACAAATAA 20M 20
# EXPECT: 1 1 x2 GGTTTTATAAAACAAATAATT 21M 22
# EXPECT: 1 5 x3 TTATAAAACAAATAATTAAGTCTACA 9M4I13M 27
# EXPECT: 1 9 x4 CAAATAATTAAGTCTACAGAGCAAC 25M 34
# EXPECT: 1 11 x5 AATAATTAAGTCTACAGAGCAACT 24M 35
# EXPECT: 1 13 x6 TAATTAAGTCTACAGAGCAACTA 23M 36

print '-'  # EXPECT: -
CRAM('test/data/toy.cram', 'ref:30') |> iter |> print3
# EXPECT: 0 15 r004 ATAGCTCTCAGC 6M14N1I5M 40
# EXPECT: 0 28 r003 TAGGC 6H5M 33
# EXPECT: 0 36 r001 CAGCGCCAT 9M 45

print '-'  # EXPECT: -
with CRAM('test/data/toy.cram') as cram, BAM('test/data/toy.bam') as bam, SAM('test/data/toy.sam') as sam:
    print [(a.tid, a.name, a.len) for a in cram.contigs()]   # EXPECT: [(0, ref, 45), (1, ref2, 40)]
    print [(a.tid, str(a), a.len) for a in bam.contigs()]   # EXPECT: [(0, ref, 45), (1, ref2, 40)]
    print [(a.tid, str(a), len(a)) for a in sam.contigs()]  # EXPECT: [(0, ref, 45), (1, ref2, 40)]

    a = [rec for rec in sam]
    b = [rec for rec in bam]
    c = [rec for rec in cram]

    # make sure records work even if we store them (i.e. don't re-use same buffer)
    print a[0].name, a[-1].name  # EXPECT: r001 x6
    print b[0].name, b[-1].name  # EXPECT: r001 x6
    print c[0].name, c[-1].name  # EXPECT: r001 x6

opts1 = [True, False]
opts2 = [(a,b) for a in (True, False) for b in (True, False)]
opts3 = [(a,b,c) for a in (True, False) for b in (True, False) for c in (True, False)]
opts4 = [(a,b,c,d) for a in (True, False) for b in (True, False) for c in (True, False) for d in (True, False)]

@test
def test_fasta_options():
    read = list[list[FASTARecord]]()
    for validate, gzip, fai in opts3:
        v = list[FASTARecord]()
        FASTA('test/data/seqs.fasta', validate=validate, gzip=gzip, copy=True, fai=fai) |> iter |> v.append
        read.append(v)
    for a in read:
        assert a == read[0]

@test
def test_fastq_options():
    read = list[list[FASTQRecord]]()
    for validate, gzip in opts2:
        v = list[FASTQRecord]()
        FASTQ('test/data/seqs.fastq', validate=validate, gzip=gzip, copy=True) |> iter |> v.append
        read.append(v)
    for a in read:
        assert a == read[0]

@test
def test_seqs_options():
    read = list[list[seq]]()
    for validate, gzip in opts2:
        v = list[seq]()
        Seqs('test/data/seqs.txt', validate=validate, gzip=gzip, copy=True) |> iter |> v.append
        read.append(v)
    for a in read:
        assert a == read[0]

@test
def test_fasta_options_gz():
    read = list[list[FASTARecord]]()
    for validate in opts1:
        v = list[FASTARecord]()
        FASTA('test/data/seqs.fasta.gz', validate=validate, gzip=True, copy=True, fai=False) |> iter |> v.append
        read.append(v)
    for a in read:
        assert a == read[0]

@test
def test_fastq_options_gz():
    read = list[list[FASTQRecord]]()
    for validate in opts1:
        v = list[FASTQRecord]()
        FASTQ('test/data/seqs.fastq.gz', validate=validate, gzip=True, copy=True) |> iter |> v.append
        read.append(v)
    for a in read:
        assert a == read[0]

@test
def test_seqs_options_gz():
    read = list[list[seq]]()
    for validate in opts1:
        v = list[seq]()
        Seqs('test/data/seqs.txt.gz', validate=validate, gzip=True, copy=True) |> iter |> v.append
        read.append(v)
    for a in read:
        assert a == read[0]

@test
def test_seqs_bad_base():
    found_invalid = False
    for validate, gzip, copy in opts3:
        v = list[seq]()
        try:
            Seqs('test/data/invalid/seqs_bad_base.txt', validate=validate, gzip=gzip, copy=copy) |> iter |> v.append
            assert not validate
        except ValueError as e:
            assert validate
            assert e.message == "invalid base 'Z' at position 74 of sequence"
            found_invalid = True
    assert found_invalid

@test
def test_fasta_bad_base():
    found_invalid = False
    for validate, gzip, fai, copy in opts4:
        v = list[FASTARecord]()
        try:
            FASTA('test/data/invalid/seqs_bad_base.fasta', validate=validate, gzip=gzip, copy=copy, fai=fai) |> iter |> v.append
            assert not validate
        except ValueError as e:
            assert validate
            assert e.message == "invalid base ' ' at position 0 of sequence"
            found_invalid = True
    assert found_invalid

@test
def test_fastq_bad_name():
    found_invalid = False
    for validate, gzip, copy in opts3:
        v = list[seq]()
        try:
            FASTQ('test/data/invalid/seqs_bad_name.fastq', validate=validate, gzip=gzip, copy=copy) |> seqs |> v.append
            assert not validate
        except ValueError as e:
            assert validate
            assert e.message == "sequence name on line 1 of FASTQ does not begin with '@'"
            found_invalid = True
    assert found_invalid

@test
def test_fastq_bad_base():
    found_invalid = False
    for validate, gzip, copy in opts3:
        v = list[seq]()
        try:
            FASTQ('test/data/invalid/seqs_bad_base.fastq', validate=validate, gzip=gzip, copy=copy) |> seqs |> v.append
            assert not validate
        except ValueError as e:
            assert validate
            assert e.message == "invalid base 'X' at position 149 of sequence"
            found_invalid = True
    assert found_invalid

@test
def test_fastq_bad_qual():
    found_invalid = False
    for validate, gzip, copy in opts3:
        v = list[seq]()
        try:
            FASTQ('test/data/invalid/seqs_bad_qual.fastq', validate=validate, gzip=gzip, copy=copy) |> seqs |> v.append
            assert not validate
        except ValueError as e:
            assert validate
            assert e.message == "invalid quality score ' ' at position 0 of quality score string"
            found_invalid = True
    assert found_invalid

@test
def test_fastq_bad_qual_len():
    found_invalid = False
    for validate, gzip, copy in opts3:
        v = list[seq]()
        try:
            FASTQ('test/data/invalid/seqs_bad_qual_len.fastq', validate=validate, gzip=gzip, copy=copy) |> seqs |> v.append
            assert not validate
        except ValueError as e:
            assert validate
            assert e.message == 'quality and sequence length mismatch on line 8 of FASTQ'
            found_invalid = True
    assert found_invalid

@test
def test_fasta_comments():
    v = [(rec.header, rec.name, rec.comment) for rec in FASTA('test/data/seqs.fasta', fai=False)]
    assert v == [('chrA    my random comment', 'chrA', 'my random comment'), ('chrB', 'chrB', ''), ('chrC', 'chrC', ''), ('chrD hello', 'chrD', 'hello')]

@test
def test_fastq_comments():
    v = [(rec.header, rec.name, rec.comment) for rec in FASTQ('test/data/seqs.fastq')]
    assert v == [('SL-HXF:348:HKLFWCCXX:1:2101:15676:57231:CACCAAAAGTACATGA comment A B C', 'SL-HXF:348:HKLFWCCXX:1:2101:15676:57231:CACCAAAAGTACATGA', 'comment A B C'),
                 ('SL-HXF:348:HKLFWCCXX:1:2121:24495:55877:CACCAAAAGTACATGA', 'SL-HXF:348:HKLFWCCXX:1:2121:24495:55877:CACCAAAAGTACATGA', ''),
                 ('SL-HXF:348:HKLFWCCXX:1:2220:28361:38491:CACCAAAAGTACATGA\t\tcomment with tabs', 'SL-HXF:348:HKLFWCCXX:1:2220:28361:38491:CACCAAAAGTACATGA', 'comment with tabs'),
                 ('SL-HXF:348:HKLFWCCXX:4:1106:4553:37893:CACCAAAAGTACATGA', 'SL-HXF:348:HKLFWCCXX:4:1106:4553:37893:CACCAAAAGTACATGA', '')]

test_fasta_options()
test_fastq_options()
test_seqs_options()
test_fasta_options_gz()
test_fastq_options_gz()
test_seqs_options_gz()
test_seqs_bad_base()
test_fastq_bad_qual()
test_fastq_bad_qual_len()
test_fastq_bad_name()
test_fastq_bad_base()
test_fasta_bad_base()
test_fasta_comments()
test_fastq_comments()

# BED tests
@test
def test_minimal_bed():
    v = list(iter(BED("test/data/toy.bed")))
    assert v[0].chrom == "chr1"
    assert v[1].chrom == "chr2"
    assert v[2].chrom == "chr3"
    assert v[0].chrom_start == 11
    assert v[1].chrom_start == 33
    assert v[2].chrom_start == 55
    assert v[0].chrom_end == 22
    assert v[1].chrom_end == 44
    assert v[2].chrom_end == 66

@test
def test_parse_valid_with_header():
    parser = BED("test/data/valid_with_header.bed", True, True)
    first_row_expected = BEDRecord("chr7", 127471196, 127472363, "Pos1", 882.13435, "+", 127471196, 127472363, (255, 0, 0), 4, [11, 12, 13, 14], [14, 55, 66, 99], 12)
    header_expected = ["browser position chr7:127471196-127495720", "browser hide all", "track name=\"ItemRGBDemo\" description=\"Item RGB demonstration\" visibility=2 itemRgb=\"On\""]
    assert header_expected == parser.header
    assert first_row_expected == next(parser)
    parser.close()

@test
def test_parse_valid_without_header():
    parser = BED("test/data/valid_without_header.bed", True, True)
    first_row_expected = BEDRecord("chr7", 127471196, 127472363, "Pos1", 882.13435, "+", 127471196, 127472363, (255, 0, 0), 4, [11, 12, 13, 14], [14, 55, 66, 99], 12)
    header_expected = list[str]()
    assert header_expected == parser.header
    assert first_row_expected == next(parser)
    parser.close()

@test
def test_parse_invalid_with_header():
    with BED("test/data/invalid/invalid_with_header.bed", True, True) as parser:
        try:
            next(parser)
            assert False
        except ValueError as e:
            assert e.message == "chromStart, must be integer, line: 4"

test_minimal_bed()
test_parse_valid_with_header()
test_parse_invalid_with_header()
test_parse_valid_without_header()

# FAI tests
@test
def test_parse_valid():
    parser = FAI("test/data/valid_fai.fai", fastq=True)
    first_row_expected = FAIRecord('fastq1', 66, 8, 30, 31, 79)
    #print next(parser)
    assert first_row_expected == next(parser)
    parser.close()

@test
def test_parse_invalid_missing_col():
    with FAI("test/data/invalid/invalid_fai_missing_col.fai", fastq=True) as parser:
        try:
            for _ in parser:
                pass
            assert False
        except ValueError as e:
            assert e.message == "Line 2 does not have the required number of columns, 6"

@test
def test_parse_invalid_float():
    with FAI("test/data/invalid/invalid_fai_float.fai", fastq=True) as parser:
        try:
            for _ in parser:
                pass
            assert False
        except ValueError as e:
            assert e.message == "qual_offset, must be integer, line: 1"

@test
def test_fasta_with_fai():
    with FASTA("test/data/sample_fasta_for_fai.fasta") as f:
        assert f['two'] == s'ATGCATGCATGCATGCATGCATGCATGC'
        assert f['one'] == s'ATGCATGCATGCATGCATGCATGCATGCATGCATGCATGCATGCATGCATGCATGCATGCATGCAT'

test_parse_valid()
test_parse_invalid_float()
test_parse_invalid_missing_col()
test_fasta_with_fai()

# VCF tests
def L(a): return [x for x in a]

@test
def test_parse_vcf_basic(num_threads = 0):
    path = 'test/data/toy.vcf'
    pos = [record.pos for record in VCF(path, num_threads=num_threads)]
    chroms = [record.chrom for record in VCF(path, num_threads=num_threads)]
    id = [record.id for record in VCF(path, num_threads=num_threads)]
    ref = [record.ref for record in VCF(path, num_threads=num_threads)]
    alts = [list(record.alts) for record in VCF(path, num_threads=num_threads)]
    qual = [record.qual for record in VCF(path, num_threads=num_threads)]

    assert chroms == ['20'] * 6
    assert pos == [14369, 17329, 1110695, 1230236, 1234566, 1235236]
    assert id == ['rs6054257', '', 'rs6040355', '', 'microsat1', '']
    assert ref == [s'G', s'T', s'A', s'T', s'G', s'T']
    assert alts == [[s'A'], [s'A'], [s'G', s'T'], list[seq](), [s'GA', s'GAC'], list[seq]()]
    assert [str(x) for x in qual] == ['29.2', '3', '67', '47', '50', 'nan']

'''
@test
def test_parse_vcf_samples():
    path = 'test/data/toy.vcf'
    samples = list[list[str]]()
    for record in VCF(path):
        samples.append([str(x) for x in record.samples])
    assert samples == [['NA00001', 'NA00002', 'NA00003']] * 6

@test
def test_parse_vcf_filters():
    path = 'test/data/toy.vcf'
    filters = [L(record.filters) for record in VCF(path)]
    assert filters == [['q10', 's50'], ['q10'], ['PASS'], ['PASS'], ['PASS'], list[str]()]

@test
def test_parse_vcf_format():
    path = 'test/data/toy.vcf'
    formats = [L(record.formats) for record in VCF(path)]
    assert formats == [['GT', 'GQ', 'DP', 'HQ'], ['GT', 'GQ', 'DP', 'HQ'], ['GT', 'GQ', 'DP', 'HQ'], ['GT', 'GQ', 'DP', 'HQ'], ['GT', 'GQ', 'DP'], ['GT']]
'''

@test
def test_parse_vcf_info():
    path = 'test/data/toy.vcf'
    AF = list[float]()
    AA = list[str]()
    for record in VCF('test/data/toy.vcf'):
        try:
            AF.append(record.info.get_float('AF'))
        except:
            AF.append(-1.)
        try:
            AA.append(record.info.get_str('AA'))
        except:
            AA.append('')

    assert AA == ['String,Multi,Val', '', 'FA,DADA', 'T', 'G', '']
    assert [str(x) for x in AF] == ['0.5', '0.017', '-1', '-1', '-1', '-1']

    def info_list(record, key):
        try:
            return list(record.info.get_floats(key))
        except:
            return list[float]()
    AF_full = [info_list(record, 'AF') for record in VCF(path)]
    assert [[str(x) for x in a] for a in AF_full] == [['0.5'], ['0.017'], ['0.333', '0.667'], list[str](), list[str](), list[str]()]

test_parse_vcf_basic()
test_parse_vcf_basic(num_threads=1)
test_parse_vcf_basic(num_threads=2)
#test_parse_vcf_samples()
#test_parse_vcf_filters()
#test_parse_vcf_format()
test_parse_vcf_info()
