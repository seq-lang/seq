from bio.types import *

@inline
def _preprocess_seq_pattern(pattern: str):
    VALID = ('\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00'
            '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            '\x00\x01\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00'
            '\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01'
            '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
    STAR = byte(42)
    p = pattern.ptr
    n = pattern.len
    star = -1
    i = 0
    while i < n:
        c = p[i]
        if not VALID[int(c)]:
            raise ValueError("invalid character '" +  str(c) + "' in seq pattern")
        if c == STAR:
            if star >= 0:
                raise ValueError("seq pattern can contain at most one '*'")
            star = i
        i += 1
    return star

@tuple
class seq:
    len: int
    ptr: Ptr[byte]

    def __new__(s: str) -> seq:
        return (s.len, s.ptr)
    def __new__(p: Ptr[byte], l: int) -> seq:
        return (l, p)
    def __str__(self) -> str:
        return str(self.ptr, self.len)
    def __len__(self):
        return self.len if self.len >= 0 else -self.len

@extend
class str:
    def __prefix_s__[N: int = 0](s: str) -> seq:
        return seq(s)

@tuple
class BaseCounts:
    '''
    Representation of base counts of a sequence
    '''
    A: int
    C: int
    G: int
    T: int
    N: int

    def __new__() -> BaseCounts:
        '''
        Base counts of empty sequence (i.e. all zero)
        '''
        return (0, 0, 0, 0, 0)

    def __add__(self, other: BaseCounts):
        '''
        Adds corresponding base counts
        '''
        A1, C1, G1, T1, N1 = self
        A2, C2, G2, T2, N2 = other
        return BaseCounts(A1 + A2, C1 + C2, G1 + G2, T1 + T2, N1 + N2)

    def __sub__(self, other: BaseCounts):
        '''
        Subtracts corresponding base counts
        '''
        A1, C1, G1, T1, N1 = self
        A2, C2, G2, T2, N2 = other
        return BaseCounts(A1 - A2, C1 - C2, G1 - G2, T1 - T2, N1 - N2)

    def add(self, A: bool = False, C: bool = False, G: bool = False, T: bool = False, N: bool = False):
        '''
        Increments the specified base counts
        '''
        A1, C1, G1, T1, N1 = self
        if A:
            A1 += 1
        if C:
            C1 += 1
        if G:
            G1 += 1
        if T:
            T1 += 1
        if N:
            N1 += 1
        return BaseCounts(A1, C1, G1, T1, N1)

    def __str__(self):
        A, C, G, T, N = self
        return f'BaseCounts({A=}, {C=}, {G=}, {T=}, {N=})'

@extend
class seq:
    def __new__(s: str) -> seq:
        return seq(s.ptr, s.len)

    def __new__() -> seq:
        return seq(cobj(), 0)

    def __eq__(self, other: seq):
        n = len(self)
        if n != len(other):
            return False
        i = 0
        while i < n:
            if self._at(i) != other._at(i):
                return False
            i += 1
        return True

    def __ne__(self, other: seq):
        return not (self == other)

    def _cmp(self, other: seq):
        self_len = len(self)
        other_len = len(other)
        n = min(self_len, other_len)
        i = 0
        while i < n:
            c1 = self._at(i)
            c2 = other._at(i)
            if c1 != c2:
                return int(c1) - int(c2)
            i += 1
        return self_len - other_len

    def __to_py__(self) -> pyobj:
        return str(self.ptr, self.len).__to_py__()

    def __from_py__(s: pyobj) -> seq:
        return seq(str.__from_py__(s))

    def __lt__(self, other: seq):
        return self._cmp(other) < 0

    def __le__(self, other: seq):
        return self._cmp(other) <= 0

    def __gt__(self, other: seq):
        return self._cmp(other) > 0

    def __ge__(self, other: seq):
        return self._cmp(other) >= 0

    def __str__(self):
        if self.len >= 0:
            return str(self.ptr, self.len)
        n = -self.len
        p = Ptr[byte](n)
        for i in range(n):
            p[i] = self._at(i)
        return str(p, n)

    def __contains__(self, other: seq):
        return str(other) in str(self)

    def __contains__[K](self, kmer: K):
        for k in self.kmers[K](step=1):
            if k == kmer:
                return True
        return False

    def __len__(self):
        return abs(self.len)

    def __bool__(self):
        return self.len != 0

    def __hash__(self):
        h = 0
        for i in range(len(self)):
            h = 31*h + int(self._at(i))
        return h

    def __getitem__(self, idx: int):
        n = len(self)
        if idx < 0:
            idx += n
        if not (0 <= idx < n):
            raise IndexError("seq index out of range")
        if self.len >= 0:
            return seq(self.ptr + idx, 1)
        else:
            return seq(self.ptr + (n - idx - 1), -1)

    def _at(self, idx: int):
        b = self.ptr[(-self.len - idx - 1) if (self.len < 0) else idx]
        return b.comp() if self.len < 0 else b

    @inline
    def _slice_fwd(self, a: int, b: int):
        return seq(self.ptr + a, b - a)

    @inline
    def _slice_rev(self, a: int, b: int):
        return seq(self.ptr + (-self.len - b), -(b - a))

    def _slice_direct(self, a: int, b: int):
        if self.len >= 0:
            return self._slice_fwd(a, b)
        else:
            return self._slice_rev(a, b)

    def __getitem__(self, s: Slice):
        assert s.step is None
        if s.start is None and s.stop is None and s.step is None:
            return self.__copy__()
        elif s.start is None:
            b = ~s.stop
            n = len(self)
            if b < 0: b += n
            if b > n: b = n
            if self.len >= 0:
                return seq(self.ptr, b)
            else:
                return seq(self.ptr + (n - b), -b)
        elif s.stop is None:
            a = ~s.start
            n = len(self)
            if a < 0: a += n
            if a > n: a = n
            if self.len >= 0:
                return seq(self.ptr + a, n - a)
            else:
                return seq(self.ptr, -(n - a))
        else:
            a, b = ~s.start, ~s.stop
            n = len(self)
            if a < 0: a += n
            if b < 0: b += n
            if a > n: a = n
            if b > n: b = n
            return self._slice_direct(a, b)

    def _copy_to(self, p: cobj):
        if self.len >= 0:
            str.memcpy(p, self.ptr, self.len)
        else:
            n = -self.len
            for i in range(n):
                p[i] = self.ptr[n - i - 1]

    def __copy__(self):
        n = len(self)
        p = cobj(n)
        self._copy_to(p)
        return seq(p, n)

    def split(self, k: int, step: int = 1):
        '''
        Iterator over length-`k` subsequences of the given sequence
        with the specified step size.
        '''
        i = 0
        while i + k <= len(self):
            yield self._slice_direct(i,i+k)
            i += step

    def __iter__(self):
        return self.split(1, 1)

    def __reversed__(self):
        i = len(self) - 1
        while i >= 0:
            yield self._slice_direct(i,i+1)
            i -= 1

    def kmers[K](self, step: int = 1):
        '''
        Iterator over k-mers (type `K`) of the given sequence
        with the specified step size. Note that k-mers spanning
        ambiguous bases will be skipped.
        '''
        for pos, kmer in self.kmers_with_pos[K](step):
            yield kmer

    def kmers_canonical[K](self):
        '''
        Iterator over canonical k-mers (type `K`) of the given sequence.
        Note that k-mers spanning ambiguous bases will be skipped.
        A canonical k-mer is defined to be the minimum of a k-mer and
        its reverse complement.
        '''
        k = K.len()
        n = len(self)
        x0 = K()
        x1 = K()
        i = 0
        l = 0
        while i < n:
            c = int(seq._nt4_table()[int(self._at(i))])
            if c < 4:
                x0 = K(x0.as_int() << K(2).as_int() | K(c).as_int())
                x1 = K(x1.as_int() >> K(2).as_int() | K(3 - c).as_int() << K((k - 1)*2).as_int())
                l += 1
                if l >= k:
                    yield x0 if x0 < x1 else x1
            else:
                l = 0
            i += 1

    def kmers_canonical_with_pos[K](self):
        '''
        Iterator over (0-based index, canonical k-mer) tuples of the given
        sequence with the specified step size. Note that k-mers
        spanning ambiguous bases will be skipped.
        '''
        k = K.len()
        n = len(self)
        x0 = K()
        x1 = K()
        i = 0
        l = 0
        while i < n:
            c = int(seq._nt4_table()[int(self._at(i))])
            if c < 4:
                x0 = K(x0.as_int() << K(2).as_int() | K(c).as_int())
                x1 = K(x1.as_int() >> K(2).as_int() | K(3 - c).as_int() << K((k - 1)*2).as_int())
                l += 1
                if l >= k:
                    yield (i - k + 1, x0 if x0 < x1 else x1)
            else:
                l = 0
            i += 1

    def kmers_with_pos[K](self, step: int = 1):
        '''
        Iterator over (0-based index, k-mer) tuples of the given
        sequence with the specified step size. Note that k-mers
        spanning ambiguous bases will be skipped.
        '''
        # This function is intentionally written this way. It could be simplified,
        # but this version was found to be the most performant due to inlining etc.
        k = K.len()
        if self.len >= 0:
            n = self.len
            i = 0
            kmer = K()
            refresh = True
            while i + k <= n:
                if refresh:
                    sub = self._slice_fwd(i, i + k)
                    if not sub.N():
                        kmer = K._make_fwd(sub.ptr, k)
                        refresh = step >= k
                        yield (i, kmer)
                else:
                    sub = self._slice_fwd(i + k - step, i + k)
                    if not sub.N():
                        kmer = kmer._lsh_fwd(sub.ptr, step)
                        yield (i, kmer)
                    else:
                        refresh = True
                i += step
        else:
            n = -self.len
            i = 0
            kmer = K()
            refresh = True
            while i + k <= n:
                if refresh:
                    sub = self._slice_rev(i, i + k)
                    if not sub.N():
                        kmer = K._make_rev(sub.ptr, k)
                        refresh = step >= k
                        yield (i, kmer)
                else:
                    sub = self._slice_rev(i + k - step, i + k)
                    if not sub.N():
                        kmer = kmer._lsh_rev(sub.ptr, step)
                        yield (i, kmer)
                    else:
                        refresh = True
                i += step

    def _kmers_revcomp[K](self, step: int):
        for pos, kmer in self._kmers_revcomp_with_pos[K](step):
            yield kmer

    def _kmers_revcomp_with_pos[K](self, step: int):
        # This function is intentionally written this way. It could be simplified,
        # but this version was found to be the most performant due to inlining etc.
        k = K.len()
        if self.len >= 0:
            n = self.len
            i = step * ((n - k) // step) + k - 1
            kmer = K()
            refresh = True
            while i + 1 - k >= 0:
                if refresh:
                    sub = self._slice_fwd(i + 1 - k, i + 1)
                    if not sub.N():
                        kmer = K._make_rev(sub.ptr, k)
                        refresh = step >= k
                        yield (i - k + 1, kmer)
                else:
                    sub = self._slice_fwd(i + 1 - k, i + 1 - k + step)
                    if not sub.N():
                        kmer = kmer._lsh_rev(sub.ptr, step)
                        yield (i - k + 1, kmer)
                    else:
                        refresh = True
                i -= step
        else:
            n = -self.len
            i = step * ((n - k) // step) + k - 1
            kmer = K()
            refresh = True
            while i + 1 - k >= 0:
                if refresh:
                    sub = self._slice_rev(i + 1 - k, i + 1)
                    if not sub.N():
                        kmer = K._make_fwd(sub.ptr, k)
                        refresh = step >= k
                        yield (i - k + 1, kmer)
                else:
                    sub = self._slice_rev(i + 1 - k, i + 1 - k + step)
                    if not sub.N():
                        kmer = kmer._lsh_fwd(sub.ptr, step)
                        yield (i - k + 1, kmer)
                    else:
                        refresh = True
                i -= step

    def _nt4_table():
        return ('\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04'
                '\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04'
                '\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04'
                '\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04'
                '\x04\x00\x04\x01\x04\x04\x04\x02\x04\x04\x04\x04\x04\x04\x04\x04'
                '\x04\x04\x04\x04\x03\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04'
                '\x04\x00\x04\x01\x04\x04\x04\x02\x04\x04\x04\x04\x04\x04\x04\x04'
                '\x04\x04\x04\x04\x03\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04'
                '\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04'
                '\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04'
                '\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04'
                '\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04'
                '\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04'
                '\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04'
                '\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04'
                '\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04').ptr

    def _nt4z_table():
        return ('\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                '\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00'
                '\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                '\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00'
                '\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
                '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00').ptr

    @inline
    def _enc(b: byte):
        return int(seq._nt4_table()[int(b)])

    @inline
    def _encz(b: byte):
        return int(seq._nt4z_table()[int(b)])

    def N(self):
        '''
        Returns whether this sequence contains ambiguous bases.
        An ambiguous base is defined to be a non-ACGT base.
        '''
        nt4 = seq._nt4_table()
        i = 0
        n = len(self)
        while i < n:
            if nt4[int(self.ptr[i])] > byte(3):
                return True
            i += 1
        return False

    def _base_value(b: byte, n: int):
        c = seq._enc(b)
        if c == 4: return 4
        return c if n > 0 else 3 - c

    def __int__(self):
        if len(self) != 1:
            raise ValueError("sequence length is not 1")
        return seq._base_value(self.ptr[0], self.len)

    @property
    def bases(self):
        '''
        `BaseCount` for this sequence
        '''
        p = __array__[int](5)
        p[0], p[1], p[2], p[3], p[4] = 0, 0, 0, 0, 0
        i = 0
        n = len(self)
        while i < n:
            p[seq._base_value(self.ptr[i], self.len)] += 1
            i += 1
        A, C, G, T, N = p
        return BaseCounts(A, C, G, T, N)

    def __invert__(self):
        '''
        Reverse complemented sequence
        '''
        return seq(self.ptr, -self.len)

    def __reversed__(self):
        n = len(self)
        p = Ptr[byte](n)
        i = 0
        while i < n:
            p[i] = self._at(n - i - 1)
            i += 1
        return seq(p, n)

@extend
class seq:
    def __match__(self, pattern: str):
        WILD = byte(95)
        p = pattern.ptr
        n = pattern.len
        star = _preprocess_seq_pattern(pattern)
        if star >= 0:
            m = len(self)
            if m < n - 1:
                return False
            i = 0
            while i < star:
                if p[i] != WILD and p[i] != self._at(i):
                    return False
                i += 1
            i = star + 1
            while i < n:
                if p[i] != WILD and p[i] != self._at(i + m - n):
                    return False
                i += 1
            return True
        else:
            if len(self) != n:
                return False
            i = 0
            while i < n:
                if p[i] != WILD and p[i] != self._at(i):
                    return False
                i += 1
            return True
