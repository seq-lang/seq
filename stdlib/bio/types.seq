@extend
class byte:
    def comp(self) -> byte:
        _byte_comp_table = "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN-.NNNNNNNNNNNNNNNNNNTVGHNNCDNNMNKNNNNYSAABWNRNNNNNNNtvghNNcdNNmNknNNNysaabwNrNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN"
        return _byte_comp_table.ptr[int(self)]

@extend
class Dict[K,V]:
    def prefetch(self, key: K):
        if self._n_buckets:
            from internal.types.collections.dict import _dict_hash
            mask = self._n_buckets - 1
            k = _dict_hash(key)
            i = k & mask
            (self._keys + i).__prefetch_r1__()
            (self._vals + i).__prefetch_r1__()
            (self._flags + (i >> 4)).__prefetch_r1__()

@extend
class List[T]:
    def prefetch(self, idx: int):
        (self.arr.ptr + idx).__prefetch_r3__()
