from bio import seq, CIGAR

from os import getenv as _getenv
BWA_LIB = _getenv('BWA_LIB')
if not BWA_LIB:
    raise OSError("BWA error: 'BWA_LIB' environment variable not set")

@tuple
class bntann1_t:
    _offset: i64
    _len: i32
    _n_ambs: i32
    _gi: u32
    _is_alt: i32
    _name: Ptr[byte]
    _anno: Ptr[byte]

@tuple
class bntamb1_t:
    _offset: i64
    _len: i32
    _amb: byte

@tuple
class bntseq_t:
    _l_pac: i64
    _n_seqs: i32
    _seed: u32
    _anns: Ptr[bntann1_t]
    _n_holes: i32
    _ambs: Ptr[bntamb1_t]
    _fp_pac: cobj

@tuple
class mem_alnreg_t:
    _rb: i64
    _re: i64
    _qb: i32
    _qe: i32
    _rid: i32
    _score: i32
    _truesc: i32
    _sub: i32
    _alt_sc: i32
    _csub: i32
    _sub_n: i32
    _w: i32
    _seedcov: i32
    _secondary: i32
    _secondary_all: i32
    _seedlen0: i32
    _bitfields: u32
    _frac_rep: u32  # really a 32-bit float
    _hash: u64

    @property
    def rb(self):
        return int(self._rb)

    @property
    def re(self):
        return int(self._re)

    @property
    def qb(self):
        return int(self._qb)

    @property
    def qe(self):
        return int(self._qe)

    @property
    def rid(self):
        return int(self._rid)

    @property
    def score(self):
        return int(self._score)

    @property
    def true_score(self):
        return int(self._truesc)

    @property
    def sub(self):
        return int(self._sub)

    @property
    def alt_score(self):
        return int(self._alt_sc)

    @property
    def csub(self):
        return int(self._csub)

    @property
    def sub_n(self):
        return int(self._sub_n)

    @property
    def w(self):
        return int(self._w)

    @property
    def seedcov(self):
        return int(self._seedcov)

    @property
    def secondary(self):
        return int(self._secondary)

    @property
    def secondary_all(self):
        return int(self._secondary_all)

@tuple
class mem_aln_t:
    _pos: i64
    _rid: i32
    _flag: i32
    _bitfields: u32
    _n_cigar: i32
    _cigar: Ptr[u32]
    _XA: Ptr[byte]
    _score: i32
    _sub: i32
    _alt_sc: i32

    @property
    def pos(self):
        return int(self._pos)

    @property
    def rid(self):
        return int(self._rid)

    @property
    def rev(self):
        return bool(self._bitfields & u32(0x1))

    @property
    def alt(self):
        return bool(self._bitfields & u32(0x2))

    @property
    def mapq(self):
        return int((self._bitfields & u32(0x3fc)) >> u32(2))

    @property
    def NM(self):
        return int((self._bitfields & u32(0xfffffc00)) >> u32(10))

    @property
    def cigar(self):
        return CIGAR(self._cigar, int(self._n_cigar))

    @property
    def score(self):
        return int(self._score)

    @property
    def sub(self):
        return int(self._sub)

    @property
    def alt_score(self):
        return int(self._alt_sc)

@tuple
class mem_alnreg_v:
    n: int
    m: int
    a: Ptr[mem_alnreg_t]

    def __new__() -> mem_alnreg_v:
        return (0, 0, Ptr[mem_alnreg_t]())

    def __getitem__(self, idx: int):
        if not (0 <= idx < self.n):
            raise IndexError("alignment index out of range")
        return self.a[idx]

    def __len__(self):
        return self.n

    def __iter__(self):
        i = 0
        while i < self.n:
            yield self.a[i]
            i += 1

@tuple
class bwaidx_t:
    _bwt: cobj
    _bns: Ptr[bntseq_t]
    _pac: cobj
    _is_shm: i32
    _l_mem: i64
    _mem: cobj

    def name(self, aln: mem_aln_t):
        def _strlen(p: Ptr[byte]):
            n = 0
            while p[n]: n += 1
            return n
        p = self._bns[0]._anns[aln.rid]._name
        return str(p, _strlen(p))

_BWA_IDX_BWT = i32(0x1)
_BWA_IDX_BNS = i32(0x2)
_BWA_IDX_PAC = i32(0x4)
_BWA_IDX_ALL = i32(0x7)

from C import BWA_LIB.mem_opt_init() -> cobj
from C import BWA_LIB.bwa_fill_scmat(i32, i32, Ptr[i8]) -> cobj
from C import BWA_LIB.bwa_idx_load(cobj, i32) -> Ptr[bwaidx_t]
from C import BWA_LIB.mem_align1(Ptr[mem_alnreg_v], cobj, cobj, Ptr[bntseq_t], cobj, i32, Ptr[byte])
from C import BWA_LIB.mem_reg2aln(Ptr[mem_aln_t], cobj, Ptr[bntseq_t], cobj, i32, Ptr[byte], Ptr[mem_alnreg_t])

def options(match_score: int = 1,
            mismatch_score: int = 4,
            open_del: int = 6,
            open_ins: int = 6,
            extend_del: int = 1,
            extend_ins: int = 1,
            bandwidth: int = 100,
            zdrop: int = 100,
            clip_penalty: Tuple[int,int] = (5,5),
            unpaired_penalty: int = 17):
    # offsets below are based on BWA mem_opt_t definition
    opt = mem_opt_init()
    p = Ptr[i32](opt + 0 * 4); p[0] = i32(match_score)
    p = Ptr[i32](opt + 1 * 4); p[0] = i32(mismatch_score)
    p = Ptr[i32](opt + 2 * 4); p[0] = i32(open_del)
    p = Ptr[i32](opt + 3 * 4); p[0] = i32(extend_del)
    p = Ptr[i32](opt + 4 * 4); p[0] = i32(open_ins)
    p = Ptr[i32](opt + 5 * 4); p[0] = i32(extend_ins)
    p = Ptr[i32](opt + 6 * 4); p[0] = i32(unpaired_penalty)
    p = Ptr[i32](opt + 7 * 4); p[0] = i32(clip_penalty[0])
    p = Ptr[i32](opt + 8 * 4); p[0] = i32(clip_penalty[1])
    p = Ptr[i32](opt + 9 * 4); p[0] = i32(bandwidth)
    p = Ptr[i32](opt + 10 * 4); p[0] = i32(zdrop)
    bwa_fill_scmat(i32(match_score), i32(mismatch_score), Ptr[i8](opt + 140))
    return opt

@tuple
class BWA:
    opt: cobj
    p: Ptr[bwaidx_t]

    def __new__(hint: str) -> BWA:
        return (mem_opt_init(), bwa_idx_load(hint.c_str(), _BWA_IDX_ALL))

    def __new__(opt: cobj, hint: str) -> BWA:
        return (opt, bwa_idx_load(hint.c_str(), _BWA_IDX_ALL))

    def name(self, aln: mem_aln_t):
        return self.p[0].name(aln)

    def reg2aln(self, s: seq, reg: mem_alnreg_t):
        from C import free(Ptr[byte])
        a = mem_aln_t()
        mem_reg2aln(__ptr__(a), self.opt, self.p[0]._bns, self.p[0]._pac, i32(len(s)), s.ptr, __ptr__(reg))
        # fix CIGAR & marshal to GC:
        n_cigar = int(a._n_cigar)
        cigar = Ptr[u32](n_cigar)
        for i in range(n_cigar):
            c = a._cigar[i]
            n, op = c >> u32(4), c & u32(0xf)
            if u32(3) <= op < u32(0xf):
                op += u32(1)
            cigar[i] = (n << u32(4)) | op
        free(a._cigar.as_byte())
        Ptr[Ptr[u32]](__ptr__(a).as_byte() + 24)[0] = cigar  # note offset
        return a

    def align(self, s: seq):
        import internal.gc as gc
        from C import free(Ptr[byte])
        p = s.ptr if s.len >= 0 else str(s).ptr
        ar = mem_alnreg_v()
        mem_align1(__ptr__(ar), self.opt, self.p[0]._bwt, self.p[0]._bns, self.p[0]._pac, i32(len(s)), p)
        # marshal to GC:
        n_bytes = ar.n * gc.sizeof(mem_alnreg_t)
        copy = gc.alloc_atomic(n_bytes)
        str.memcpy(copy.as_byte(), ar.a.as_byte(), n_bytes)
        free(ar.a.as_byte())
        Ptr[Ptr[mem_alnreg_t]](__ptr__(ar).as_byte() + 16)[0] = Ptr[mem_alnreg_t](copy)  # note offset
        return ar
