# Seq Alignment
from bio.seq import seq
from bio.pseq import pseq
from c_htslib import bam_cigar2qlen, bam_cigar2rlen
from internal.gc import sizeof

@tuple
class CIGAR:
    _data: Ptr[u32]
    _len: int

@tuple
class Alignment:
    _cigar: CIGAR
    _score: int

    def __str__(self):
        return str((self._cigar, self._score))

from C import seq_align(seq, seq, Ptr[i8], i8, i8, int, int, int, int, Ptr[Alignment])
from C import seq_align_dual(seq, seq, Ptr[i8], i8, i8, i8, i8, int, int, int, int, Ptr[Alignment])
from C import seq_align_splice(seq, seq, Ptr[i8], i8, i8, i8, i8, int, int, Ptr[Alignment])
from C import seq_align_global(seq, seq, Ptr[i8], i8, i8, int, bool, Ptr[Alignment])
from C import seq_align_default(seq, seq, Ptr[Alignment])
from C import seq_palign(pseq, pseq, Ptr[i8], i8, i8, int, int, int, int, Ptr[Alignment])
from C import seq_palign_dual(pseq, pseq, Ptr[i8], i8, i8, i8, i8, int, int, int, int, Ptr[Alignment])
from C import seq_palign_global(pseq, pseq, Ptr[i8], i8, i8, int, Ptr[Alignment])
from C import seq_palign_default(pseq, pseq, Ptr[Alignment])


# adapted from ksw2:
_ALIGN_SCORE_NEG_INF = -0x40000000
_ALIGN_SCORE_ONLY    = 0x01
_ALIGN_RIGHT         = 0x02
_ALIGN_GENERIC_SC    = 0x04
_ALIGN_APPROX_MAX    = 0x08
_ALIGN_APPROX_DROP   = 0x10
_ALIGN_EXTZ_ONLY     = 0x40
_ALIGN_REV_CIGAR     = 0x80
_ALIGN_SPLICE_FOR    = 0x100
_ALIGN_SPLICE_REV    = 0x200
_ALIGN_SPLICE_FLANK  = 0x400

_ALIGN_KIND_REGULAR = 0
_ALIGN_KIND_DUAL    = 1
_ALIGN_KIND_SPLICE  = 2
_ALIGN_KIND_GLOBAL  = 3

@tuple
class SubMat:
    '''
    Substitution matrix for amino acid alignment
    '''
    mat: Ptr[i8]

    def _N():
        return 23

    def __new__(d: Dict[Tuple[str, str], int]) -> SubMat:
        def aa_code(c: str):
            if len(c) != 1:
                raise ValueError("sequence length != 1: " + c)
            AA = 'ABCDEFGHIKLMNPQRSTVWXYZ'
            assert len(AA) == SubMat._N()
            b = c.ptr[0]
            i = 0
            while i < len(AA):
                if b == AA.ptr[i]:
                    return i
                i += 1
            raise ValueError("unknown amino acid code: " + c)

        N = SubMat._N()
        p = Ptr[i8](N * N)
        for i in range(N * N):
            p[i] = i8(0)
        for k,v in d.items():
            if not (-128 <= v <= 127):
                raise ValueError("substitution score out of [-128, 127] range: " + str(v))
            a1 = aa_code(k[0])
            a2 = aa_code(k[1])
            p[a1*N + a2] = i8(v)
            p[a2*N + a1] = i8(v)
        return (p,)

    def __str__(self):
        N = SubMat._N()
        s = []
        k = 0
        for i in range(N):
            for j in range(N):
                s.append(str(int(self.mat[k])) + ' ')
                k += 1
        return ''.join(s)

@extend
class CIGAR:
    def __new__() -> CIGAR:
        return (Ptr[u32](), 0)

    def __len__(self):
        return self._len

    def __eq__(self, other: CIGAR):
        if self._len != other._len:
            return False
        i = 0
        while i < len(self):
            if self._data[i] != other._data[i]:
                return False
            i += 1
        return True

    def __ne__(self, other: CIGAR):
        return not (self == other)

    def __copy__(self) -> CIGAR:
        p = Ptr[u32](self._len)
        str.memcpy(p.as_byte(), self._data.as_byte(), self._len * sizeof[u32]())
        return CIGAR(p, self._len)

    def __bool__(self):
        return self._len > 0

    def __new__(cigar: str) -> CIGAR:
        ops = List[int]()
        d = 0
        for c in cigar:
            if c.isdigit():
                d = 10 * d + ord(c) - ord('0')
            elif c in "MIDNSHP=XB":
                if d == 0:
                    raise ValueError(f"cigar op {repr(c)} in string {repr(cigar)} has no count or count zero")
                ops.append((d << 4) | "MIDNSHP=XB".find(c))
                d = 0
            else:
                raise ValueError(f"invalid CIGAR string {repr(cigar)}: unexpected {repr(c)}")
        if d != 0:
            raise ValueError(f"unclosed cigar op in string {repr(cigar)}")
        p = Ptr[u32](len(ops))
        for i, o in enumerate(ops):
            p[i] = u32(o)
        return (p, len(ops))

    @property
    def qlen(self):
        return bam_cigar2qlen(self._len, self._data)

    @property
    def rlen(self):
        return bam_cigar2rlen(self._len, self._data)

    def __getitem__(self, idx: int):
        if not (0 <= idx < len(self)):
            raise IndexError("CIGAR index out of range")
        v = self._data[idx]
        return (int(v) >> 4, "MIDNSHP=XB"[int(v) & 0xf])

    def __iter__(self):
        for i in range(len(self)):
            yield self[i]

    def __str__(self):
        v = List[str](len(self) * 2)
        for op in self:
            v.append(str(op[0]))
            v.append(str(op[1]))
        return str.cat(v)

    def __reversed__(self):
        n = self._len
        p = Ptr[u32](n)
        i = 0
        while i < n:
            p[i] = self._data[n - i - 1]
            i += 1
        return CIGAR(p, n)

@extend
class Alignment:
    def __new__() -> Alignment:
        return (CIGAR(), 0)

    def __new__(cigar: str, score: int) -> Alignment:
        return (CIGAR(cigar), score)

    @property
    def cigar(self):
        return self._cigar

    @property
    def score(self):
        return self._score

    def __bool__(self):
        return self._score != _ALIGN_SCORE_NEG_INF

def _validate_match(m: int):
    if m < 0 or m >= 128:
        raise ValueError("match/mismatch penalty for alignment must be in range [0, 127]")

def _validate_gap(g: int):
    if g < 0 or g >= 128:
        raise ValueError("gap penalty for alignment must be in range [0, 127]")

@extend
class seq:
    def align(self,
              other: seq,
              a: int = 2,
              b: int = 4,
              ambig: int = 0,
              gapo: int = 4,
              gape: int = 2,
              gapo2: int = -1,
              gape2: int = -1,
              bandwidth: int = -1,
              zdrop: int = -1,
              end_bonus: int = 0,
              score_only: bool = False,
              right: bool = False,
              generic_sc: bool = False,
              approx_max: bool = False,
              approx_drop: bool = False,
              ext_only: bool = False,
              rev_cigar: bool = False,
              splice: bool = False,
              splice_fwd: bool = False,
              splice_rev: bool = False,
              splice_flank: bool = False):
        '''
        Performs Smith-Waterman alignment against another sequence.

          - `a`: match score
          - `b`: mismatch score
          - `ambig`: ambiguous (i.e. N) match score
          - `gapo`: gap open cost
          - `gape`: gap extension cost
          - `gapo2`: 2nd gap open cost for dual gap cost function
          - `gape2`: 2nd gap extension cost for dual gap cost function
          - `bandwidth`: bandwidth for DP alignment
          - `zdrop`: off-diagonal drop-off to stop extension
          - `end_bonus`: score bonus for reaching end of DP matrix
          - `score_only`: if true, donâ€™t compute CIGAR
          - `right`: if true, right-align gaps
          - `approx_max`: if true, approximate max
          - `approx_drop`: if true, approximate Z-drop
          - `rev_cigar`: if true, reverse CIGAR in output
          - `ext_only`: if true, perform extension alignment
          - `splice`: if true, perform spliced alignment
        '''

        # validate args
        _validate_match(a)
        _validate_match(b)
        _validate_match(ambig)
        _validate_gap(gapo)
        _validate_gap(gape)

        if splice:
            if bandwidth >= 0:
                raise ValueError("bandwidth cannot be specified for splice alignment")
            if end_bonus != 0:
                raise ValueError("end_bonus cannot be specified for splice alignment")
        elif (splice_fwd or splice_rev or splice_flank):
            raise ValueError("splice flags require 'splice' argument be set to True")

        if (gapo2 < 0) ^ (gape2 < 0):
            raise ValueError("dual gap o/e costs must both be given or both be omitted")
        dual = (gapo2 >= 0)
        if dual:
            _validate_gap(gapo2)
            _validate_gap(gape2)

        mat = __array__[i8](25)
        mat[0]  = i8(a)
        mat[1]  = i8(-b)
        mat[2]  = i8(-b)
        mat[3]  = i8(-b)
        mat[4]  = i8(-ambig)
        mat[5]  = i8(-b)
        mat[6]  = i8(a)
        mat[7]  = i8(-b)
        mat[8]  = i8(-b)
        mat[9]  = i8(-ambig)
        mat[10] = i8(-b)
        mat[11] = i8(-b)
        mat[12] = i8(a)
        mat[13] = i8(-b)
        mat[14] = i8(-ambig)
        mat[15] = i8(-b)
        mat[16] = i8(-b)
        mat[17] = i8(-b)
        mat[18] = i8(a)
        mat[19] = i8(-ambig)
        mat[20] = i8(-ambig)
        mat[21] = i8(-ambig)
        mat[22] = i8(-ambig)
        mat[23] = i8(-ambig)
        mat[24] = i8(-ambig)

        flags = 0
        if score_only:
            flags |= _ALIGN_SCORE_ONLY
        if right:
            flags |= _ALIGN_RIGHT
        if generic_sc:
            flags |= _ALIGN_GENERIC_SC
        if approx_max:
            flags |= _ALIGN_APPROX_MAX
        if approx_drop:
            flags |= _ALIGN_APPROX_DROP
        if ext_only:
            flags |= _ALIGN_EXTZ_ONLY
        if rev_cigar:
            flags |= _ALIGN_REV_CIGAR
        if splice_fwd:
            flags |= _ALIGN_SPLICE_FOR
        if splice_rev:
            flags |= _ALIGN_SPLICE_REV
        if splice_flank:
            flags |= _ALIGN_SPLICE_FLANK

        kind = _ALIGN_KIND_REGULAR
        if splice:
            kind = _ALIGN_KIND_SPLICE
        elif dual:
            kind = _ALIGN_KIND_DUAL

        out = Alignment()
        if kind == _ALIGN_KIND_REGULAR:
            seq_align(self, other, mat.ptr, i8(gapo), i8(gape), bandwidth, zdrop, end_bonus, flags, __ptr__(out))
        elif kind == _ALIGN_KIND_DUAL:
            seq_align_dual(self, other, mat.ptr, i8(gapo), i8(gape), i8(gapo2), i8(gape2), bandwidth, zdrop, end_bonus, flags, __ptr__(out))
        elif kind == _ALIGN_KIND_SPLICE:
            seq_align_splice(self, other, mat.ptr, i8(gapo), i8(gape), i8(gapo2), i8(gape2), zdrop, flags, __ptr__(out))
        else:
            assert False
        return out

    def __matmul__(self, other: seq):
        out = Alignment()
        seq_align_default(self, other, __ptr__(out))
        return out

@extend
class pseq:
    def align(self,
              other: pseq,
              mat: SubMat,
              gapo: int = 4,
              gape: int = 2,
              gapo2: int = -1,
              gape2: int = -1,
              bandwidth: int = -1,
              zdrop: int = -1,
              end_bonus: int = 0,
              score_only: bool = False,
              right: bool = False,
              generic_sc: bool = False,
              approx_max: bool = False,
              approx_drop: bool = False,
              ext_only: bool = False,
              rev_cigar: bool = False):
        '''
        Performs Smith-Waterman alignment against another sequence.

          - `mat`: score matrix
          - `gapo`: gap open cost
          - `gape`: gap extension cost
          - `gapo2`: 2nd gap open cost for dual gap cost function
          - `gape2`: 2nd gap extension cost for dual gap cost function
          - `bandwidth`: bandwidth for DP alignment
          - `zdrop`: off-diagonal drop-off to stop extension
          - `end_bonus`: score bonus for reaching end of DP matrix
          - `score_only`: if true, donâ€™t compute CIGAR
          - `right`: if true, right-align gaps
          - `approx_max`: if true, approximate max
          - `approx_drop`: if true, approximate Z-drop
          - `rev_cigar`: if true, reverse CIGAR in output
          - `ext_only`: if true, perform extension alignment
        '''

        # validate args
        _validate_gap(gapo)
        _validate_gap(gape)

        if (gapo2 < 0) ^ (gape2 < 0):
            raise ValueError("dual gap o/e costs must both be given or both be omitted")
        dual = (gapo2 >= 0)
        if dual:
            _validate_gap(gapo2)
            _validate_gap(gape2)

        flags = 0
        if score_only:
            flags |= _ALIGN_SCORE_ONLY
        if right:
            flags |= _ALIGN_RIGHT
        if generic_sc:
            flags |= _ALIGN_GENERIC_SC
        if approx_max:
            flags |= _ALIGN_APPROX_MAX
        if approx_drop:
            flags |= _ALIGN_APPROX_DROP
        if ext_only:
            flags |= _ALIGN_EXTZ_ONLY
        if rev_cigar:
            flags |= _ALIGN_REV_CIGAR

        kind = _ALIGN_KIND_REGULAR
        if dual:
            kind = _ALIGN_KIND_DUAL

        out = Alignment()
        if kind == _ALIGN_KIND_REGULAR:
            seq_palign(self, other, mat.mat, i8(gapo), i8(gape), bandwidth, zdrop, end_bonus, flags, __ptr__(out))
        elif kind == _ALIGN_KIND_DUAL:
            seq_palign_dual(self, other, mat.mat, i8(gapo), i8(gape), i8(gapo2), i8(gape2), bandwidth, zdrop, end_bonus, flags, __ptr__(out))
        else:
            assert False
        return out

    def __matmul__(self, other: pseq):
        '''
        Performs Smith-Waterman alignment against another sequence.
        Uses Blosum-62, gap open cost 11 and gap extend cost 1.
        '''
        out = Alignment()
        seq_palign_default(self, other, __ptr__(out))
        return out

# inter-sequence alignment
# much of what follows is adapted from BWA-MEM2 (https://github.com/bwa-mem2/bwa-mem2)
@tuple
class InterAlignParams:
    a: i8
    b: i8
    ambig: i8
    gapo: i8
    gape: i8
    score_only: i8
    bandwidth: i32
    zdrop: i32
    end_bonus: i32

    def __new__(a: int, b: int, ambig: int, gapo: int, gape: int, score_only: bool, bandwidth: int, zdrop: int, end_bonus: int):
        return InterAlignParams(i8(a), i8(b), i8(ambig), i8(gapo), i8(gape),
                                i8(1 if score_only else 0), i32(bandwidth),
                                i32(zdrop), i32(end_bonus))

_LEN_LIMIT     = 512
_MAX_SEQ_LEN8  = 128
_MAX_SEQ_LEN16 = 32768

@tuple
class SeqPair:
    id: i32
    len1: i32
    len2: i32
    score: i32
    cigar: Ptr[u32]
    n_cigar: i32
    flags: i32

    def __new__(id: int, len1: int, len2: int, flags: int) -> SeqPair:
        return (i32(id), i32(len1), i32(len2), i32(_ALIGN_SCORE_NEG_INF), Ptr[u32](), i32(0), i32(flags))

# (!) caller must ensure len(s) <= LEN_LIMIT
@__force__
@inline
def _interaln_add_to_buf(s: seq, buf: Ptr[byte], step: int, idx: int):
    n = len(s)
    nt4 = seq._nt4_table()
    if s.len >= 0:
        i = 0
        while i < n:
            buf[(idx * step) + i] = nt4[int(s.ptr[i])]
            i += 1
    else:
        i = n - 1
        while i >= 0:
            c = int(nt4[int(s.ptr[i])])
            buf[(idx * step) + (n - i - 1)] = byte(3 - c if c < 4 else c)
            i -= 1

@__force__
@inline
def _interaln_sort_pairs_len_ext(pairs_array: Ptr[SeqPair], tmp_array: Ptr[SeqPair], count: int, hist: Ptr[i32]) -> Tuple[int,int,int]:
    def _max(a: i32, b: i32) -> i32: return a if a > b else b
    def _min(a: i32, b: i32) -> i32: return a if a < b else b
    num_pairs128 = 0
    num_pairs16  = 0
    num_pairs1   = 0
    str.memset(hist.as_byte(), byte(0), (_MAX_SEQ_LEN8 + _MAX_SEQ_LEN16 + 1) * sizeof[i32]())

    hist2 = hist + _MAX_SEQ_LEN8
    hist3 = hist + (_MAX_SEQ_LEN8 + _MAX_SEQ_LEN16)

    i = 0
    while i < count:
        sp = pairs_array[i]
        val = _max(sp.len1, sp.len2)
        minval = _min(sp.len1, sp.len2)
        if val < i32(_MAX_SEQ_LEN8) and minval < i32(_MAX_SEQ_LEN8):
            hist[int(minval)] += i32(1)
        elif val < i32(_MAX_SEQ_LEN16) and minval < i32(_MAX_SEQ_LEN16):
            hist2[int(minval)] += i32(1)
        else:
            hist3[0] += i32(1)
        i += 1

    cumul_sum = i32(0)
    i = 0
    while i < _MAX_SEQ_LEN8:
        cur = hist[i]
        hist[i] = cumul_sum
        cumul_sum += cur
        i += 1

    i = 0
    while i < _MAX_SEQ_LEN16:
        cur = hist2[i]
        hist2[i] = cumul_sum
        cumul_sum += cur
        i += 1

    hist3[0] = cumul_sum

    i = 0
    while i < count:
        sp = pairs_array[i]
        val = _max(sp.len1, sp.len2)
        minval = _min(sp.len1, sp.len2)

        if val < i32(_MAX_SEQ_LEN8) and minval < i32(_MAX_SEQ_LEN8):
            pos = int(hist[int(minval)])
            tmp_array[pos] = sp
            hist[int(minval)] += i32(1)
            num_pairs128 += 1
        elif val < i32(_MAX_SEQ_LEN16) and minval < i32(_MAX_SEQ_LEN16):
            pos = int(hist2[int(minval)])
            tmp_array[pos] = sp
            hist2[int(minval)] += i32(1)
            num_pairs16 += 1
        else:
            pos = int(hist3[0])
            tmp_array[pos] = sp
            hist3[0] += i32(1)
            num_pairs1 += 1

        i += 1

    i = 0
    while i < count:
        pairs_array[i] = tmp_array[i]
        i += 1

    return num_pairs128, num_pairs16, num_pairs1

@tuple
class InterAlignYield:
    query: seq
    target: seq
    aln: Alignment

    def __new__(query: seq, target: seq, extz_only: bool, rev_cigar: bool):
        flags = (_ALIGN_EXTZ_ONLY if extz_only else 0) | (_ALIGN_REV_CIGAR if rev_cigar else 0)
        return InterAlignYield(query, target, Alignment(CIGAR(), flags))

@__force__
@inline
def _interaln_queue(coro: Generator[InterAlignYield],
                    pairs_array: Ptr[SeqPair],
                    seq_buf_ref: Ptr[byte],
                    seq_buf_qer: Ptr[byte],
                    pending: Ptr[Generator[InterAlignYield]],
                    m: int,
                    params: InterAlignParams) -> int:
    coro.__resume__()  # resume coro to get next sequence to align
    if not coro.__done__():
        t, s, aln = coro.__promise__()[0]  # coro yields seqs to align
        flags = aln.score  # flags are sent via score field to save space

        # demote to intra-sequence alignment if too long
        while len(t) > _LEN_LIMIT or len(s) > _LEN_LIMIT:
            a = int(params.a)
            b = int(params.b)
            ambig = int(params.ambig)
            gapo = int(params.gapo)
            gape = int(params.gape)
            bandwidth = int(params.bandwidth)
            zdrop = int(params.zdrop)
            end_bonus = int(params.end_bonus)
            score_only = (params.score_only != i8(0))
            ext_only = ((flags & _ALIGN_EXTZ_ONLY) != 0)
            rev_cigar = ((flags & _ALIGN_REV_CIGAR) != 0)
            aln = s.align(t, a=a, b=b, ambig=ambig,
                          gapo=gapo, gape=gape, bandwidth=bandwidth,
                          zdrop=zdrop, end_bonus=end_bonus, score_only=score_only,
                          ext_only=ext_only, rev_cigar=rev_cigar)
            coro.__promise__()[0] = (s'', s'', aln)
            coro.__resume__()
            if coro.__done__():
                return m
            t, s, aln = coro.__promise__()[0]  # coro yields seqs to align
            flags = aln.score  # flags are sent via score field to save space

        pending[m] = coro
        pairs_array[m] = SeqPair(m, len(s), len(t), flags)
        _interaln_add_to_buf(s, seq_buf_ref, _LEN_LIMIT, m)
        _interaln_add_to_buf(t, seq_buf_qer, _LEN_LIMIT, m)
        m += 1
    return m

@__force__
@inline
def _interaln_flush(pairs_array: Ptr[SeqPair],
                    seq_buf_ref: Ptr[byte],
                    seq_buf_qer: Ptr[byte],
                    pending: Ptr[Generator[InterAlignYield]],
                    m: int,
                    params: InterAlignParams,
                    hist: Ptr[i32],
                    tmp_array: Ptr[SeqPair],
                    tmp_pending: Ptr[Generator[InterAlignYield]]) -> int:
    from C import seq_inter_align128(Ptr[InterAlignParams], Ptr[SeqPair], Ptr[byte], Ptr[byte], int)
    from C import seq_inter_align16(Ptr[InterAlignParams], Ptr[SeqPair], Ptr[byte], Ptr[byte], int)
    from C import seq_inter_align1(Ptr[InterAlignParams], Ptr[SeqPair], Ptr[byte], Ptr[byte], int)
    num_pairs128, num_pairs16, num_pairs1 = _interaln_sort_pairs_len_ext(pairs_array, tmp_array, m, hist)

    # we use align16 everywhere for now
    '''
    if num_pairs128 > 0:
        seq_inter_align16(__ptr__(params), pairs_array, seq_buf_ref, seq_buf_qer, num_pairs128)
    if num_pairs16 > 0:
        seq_inter_align16(__ptr__(params), pairs_array + num_pairs128, seq_buf_ref, seq_buf_qer, num_pairs16)
    '''
    if num_pairs128 + num_pairs16 > 0:
        seq_inter_align16(__ptr__(params), pairs_array, seq_buf_ref, seq_buf_qer, num_pairs128 + num_pairs16)
    if num_pairs1 > 0:
        seq_inter_align1(__ptr__(params), pairs_array + (num_pairs128 + num_pairs16), seq_buf_ref, seq_buf_qer, num_pairs1)

    i = 0
    j = 0
    while i < m:
        sp = pairs_array[i]
        coro = pending[int(tmp_array[i].id)]  # alignment kernel may overwrite IDs, so read from temp array
        score = int(sp.score)
        cigar = CIGAR(sp.cigar, int(sp.n_cigar))
        coro.__promise__()[0] = (s'', s'', Alignment(cigar, score))
        # coro.__resume__()  # resume coro; have it wait to get score back -- (!) not needed with no-suspend yield-expression
        j = _interaln_queue(coro, pairs_array, seq_buf_ref, seq_buf_qer, tmp_pending, j, params)
        i += 1
    m = j
    str.memcpy(pending.as_byte(), tmp_pending.as_byte(), m * sizeof[Generator[InterAlignYield]]())
    str.memset(tmp_pending.as_byte(), byte(0), m * sizeof[Generator[InterAlignYield]]())
    return m

@inline
def _interaln_scheduler(value,
                        coro,
                        pairs_array: Ptr[SeqPair],
                        seq_buf_ref: Ptr[byte],
                        seq_buf_qer: Ptr[byte],
                        pending: Ptr[Generator[InterAlignYield]],
                        params: InterAlignParams,
                        hist: Ptr[i32],
                        tmp_array: Ptr[SeqPair],
                        tmp_pending: Ptr[Generator[InterAlignYield]],
                        N: Ptr[int],
                        M: int,
                        args):
    m = N[0]
    while m >= M:
        m = _interaln_flush(pairs_array, seq_buf_ref, seq_buf_qer, pending, m, params, hist, tmp_array, tmp_pending)
    N[0] = _interaln_queue(coro(value, *args), pairs_array, seq_buf_ref, seq_buf_qer, pending, m, params)

