from bio.seq import seq
from c_htslib import *

# port of PySam VariantRecord functionality

BCF_UN_STR  = i32(1)
BCF_UN_FLT  = i32(2)
BCF_UN_INFO = i32(4)
BCF_UN_SHR  = i32(BCF_UN_STR | BCF_UN_FLT | BCF_UN_INFO)
BCF_UN_FMT  = i32(8)
BCF_UN_IND  = i32(BCF_UN_FMT)
BCF_UN_ALL  = i32(BCF_UN_SHR | BCF_UN_FMT)

BCF_HL_FLT  =  i32(0)
BCF_HL_INFO =  i32(1)
BCF_HL_FMT  =  i32(2)
BCF_HL_CTG  =  i32(3)
BCF_HL_STR  =  i32(4)
BCF_HL_GEN  =  i32(5)

BCF_HT_FLAG = i32(0)
BCF_HT_INT  = i32(1)
BCF_HT_REAL = i32(2)
BCF_HT_STR  = i32(3)

BCF_VL_FIXED = i32(0)
BCF_VL_VAR   = i32(1)
BCF_VL_A     = i32(2)
BCF_VL_G     = i32(3)
BCF_VL_R     = i32(4)

BCF_DT_ID     =   i32(0)
BCF_DT_CTG    =   i32(1)
BCF_DT_SAMPLE =   i32(2)

BCF_BT_NULL   =  i32(0)
BCF_BT_INT8   =  i32(1)
BCF_BT_INT16  =  i32(2)
BCF_BT_INT32  =  i32(3)
BCF_BT_FLOAT  =  i32(5)
BCF_BT_CHAR   =  i32(7)

BCF_AUX_NONE  = i32(8)

INT8_MIN  = -128
INT16_MIN = -32768
INT32_MIN = -2147483648
bcf_int8_vector_end  = (INT8_MIN+1)
bcf_int16_vector_end = (INT16_MIN+1)
bcf_int32_vector_end = (INT32_MIN+1)
bcf_str_vector_end   = 0
bcf_int8_missing     = INT8_MIN
bcf_int16_missing    = INT16_MIN
bcf_int32_missing    = INT32_MIN
bcf_float_missing    = 0x7F800001
bcf_float_vector_end = 0x7F800002
bcf_str_missing      = 0x07

def ptr_off[T](base: Ptr[byte], byte_offset: int) -> Ptr[T]:
    return Ptr[T](base + byte_offset)

char_pp = Ptr[Ptr[byte]]
char_p  = Ptr[byte]

# l and m are size_t, assume i64
@tuple
class _kstring_t:
    _l: int
    _m: int
    _s: char_p

    def __copy__(self) -> _kstring_t:
        p = Ptr[byte](self._l)
        str.memcpy(p, self._s, self._l)
        return (self._l, self._l, p)

@tuple
class _bcf_hrec_t:
    _type: i32
    _key: char_p
    _value: char_p
    _nkeys: i32
    _keys: char_pp
    _vals: char_pp

@tuple
class _bcf_idinfo_t:
    _info0: u32
    _info1: u32
    _info2: u32
    _hrec0 : Ptr[_bcf_hrec_t]
    _hrec1 : Ptr[_bcf_hrec_t]
    _hrec2 : Ptr[_bcf_hrec_t]
    _id: i32

    def info(self, _type: int):
        info = self._info0
        if _type == 1:
            info = self._info1
        elif _type == 2:
            info = self._info2
        return info

    def hrec(self, _type: int):
        hrec = self._hrec0
        if _type == 1:
            hrec = self._hrec1
        elif _type == 2:
            hrec = self._hrec2
        return hrec

@tuple
class _bcf_idpair_t:
    _key: char_p
    _val: Ptr[_bcf_idinfo_t]

@tuple
class _bcf_hdr_t:
    _n0: i32
    _n1: i32
    _n2: i32
    _id0: Ptr[_bcf_idpair_t]
    _id1: Ptr[_bcf_idpair_t]
    _id2: Ptr[_bcf_idpair_t]
    _dict0: Ptr[cobj]
    _dict1: Ptr[cobj]
    _dict2: Ptr[cobj]
    _samples: char_pp
    _hrec: Ptr[Ptr[_bcf_hrec_t]]
    _nhrec: i32
    _dirty: i32
    _ntransl: i32
    _transl0: Ptr[i32]
    _transl1: Ptr[i32]
    _nsamples_ori: i32
    _keep_samples: Ptr[u8]
    _mem: _kstring_t
    _m0: i32
    _m1: i32
    _m2: i32

    def n(self, _type_code: int):
        n = self._n0
        if _type_code == 1:
            n = self._n1
        elif _type_code == 2:
            n = self._n2
        return n

    def id(self, _type_code: int):
        _id = self._id0
        if _type_code == 1:
            _id = self._id1
        elif _type_code == 2:
            _id = self._id2
        return _id

    def _dict(self, _type_code):
        _dict = self._dict0
        if _type_code == 1:
            _dict = self._dict1
        elif _type_code == 2:
            _dict = self._dict2
        return _dict

@tuple
class _variant_t:
    _type: i32
    _n: i32

@tuple
class _bcf_fmt_t:
    _id: i32
    _n: i32
    _size: i32
    _type: i32
    _p: Ptr[u8]
    _p_len: u32
    _p_off_free: u32  # this is a bit field p_off is first 31, p_free is the last bit

def _bcf_hdr_int2id(hdr: Ptr[_bcf_hdr_t], _type: i32, _int_id: i32):
    return hdr[0].id(int(_type))[int(_int_id)]._key

@tuple
class _bcf_info_t:
    _key: i32
    _type: i32
    _len: i32
    _v1: i32  # union between i32 and float
    _vptr: Ptr[u8]
    _vptr_len: u32
    _vptr_off_free: u32  # bit field, vptr_off is first 31, _free is last
    _len2: i32

    @property
    def v1(self):
        return self._v1

    @property
    def key_code(self):
        return self._key

    def key_str(self, bcf_hdr: Ptr[_bcf_hdr_t]):
        key = _bcf_hdr_int2id(bcf_hdr, BCF_DT_ID, self._key)
        return str.from_ptr(key)

    def key_code_from_ptr(self):
        return ptr_off[i32](__ptr__(self).as_byte(), 0)[0]

    def self_ptr(self:_bcf_info_t):
        return __ptr__(self)


@tuple
class _bcf_dec_t:
    _m_fmt: i32
    _m_info: i32
    _m_id: i32
    _m_als: i32
    _m_allele: i32
    _m_flt: i32
    _n_flt: i32
    _flt: Ptr[i32]
    _id: char_p
    _als: char_p
    _allele: char_pp
    _info: Ptr[_bcf_info_t]
    _fmt: Ptr[_bcf_fmt_t]
    _var: Ptr[_variant_t]
    _n_var: i32
    _var_type: i32
    _shared_dirty: i32
    _indiv_dirty: i32

    def __new__() -> _bcf_dec_t:
        return (i32(0), i32(0), i32(0), i32(0), i32(0), i32(0), i32(0), Ptr[i32](),
                char_p(), char_p(), char_pp(), Ptr[_bcf_info_t](), Ptr[_bcf_fmt_t](),
                Ptr[_variant_t](), i32(0), i32(-1), i32(0), i32(0))

@tuple
class _bcf1_t:
    _pos: int
    _rlen: int
    _rid: i32
    _qual: i32           # really a 32-bit float
    _n_info_allele: u32  # bit field; first 16 is info, last 16 is n_allele
    _n_fmt_sample: u32   # first 8 is fmt; last 24 is sample
    _shared: _kstring_t
    _indiv: _kstring_t
    _d: _bcf_dec_t
    _max_unpack: i32
    _unpacked: i32
    _unpack_size_0: i32
    _unpacK_size_1: i32
    _unpack_size_2: i32
    _errcode: i32

    @property
    def n_info(self):
        return self._n_info_allele & u32(0x0000ffff)

    @property
    def n_allele(self):
        return ((self._n_info_allele & u32(0xffff0000)) >> u32(16))

    @property
    def n_sample(self):
        return int((self._n_fmt_sample & u32(0xffffff00)) >> u32(8))

    @property
    def n_fmt(self):
        return int(self._n_fmt_sample & u32(0x000000ff))

    def __copy__(self):
        pos, rlen, rid, qual, n_info_allele, n_fmt_sample, shared, indiv, d, max_unpack, unpacked, unpacked_size_0, unpacked_size_1, unpacked_size_2, errcode = self
        return _bcf1_t(pos, rlen, rid, qual, n_info_allele, n_fmt_sample, copy(shared), copy(indiv), _bcf_dec_t(), max_unpack, unpacked, unpacked_size_0, unpacked_size_1, unpacked_size_2, errcode)

# functions below adapted from HTSlib's vcf.h:
#define bcf_hdr_id2length(hdr,type,int_id)  ((hdr)->id[BCF_DT_ID][int_id].val->info[type]>>8 & 0xf)
#define bcf_hdr_id2number(hdr,type,int_id)  ((hdr)->id[BCF_DT_ID][int_id].val->info[type]>>12)
#define bcf_hdr_id2coltype(hdr,type,int_id) ((hdr)->id[BCF_DT_ID][int_id].val->info[type] & 0xf)
#define bcf_hdr_idinfo_exists(hdr,type,int_id)  ((int_id<0 || bcf_hdr_id2coltype(hdr,type,int_id)==0xf) ? 0 : 1)
#define bcf_hdr_id2hrec(hdr,dict_type,col_type,int_id)    ((hdr)->id[(dict_type)==BCF_DT_CTG?BCF_DT_CTG:BCF_DT_ID][int_id].val->hrec[(dict_type)==BCF_DT_CTG?0:(col_type)])
#define bcf_hdr_int2id(hdr,type,int_id) ((hdr)->id[type][int_id].key)
#define bcf_hdr_id2type(hdr,type,int_id)    ((hdr)->id[BCF_DT_ID][int_id].val->info[type]>>4 & 0xf)
#static inline const char *bcf_hdr_id2name(const bcf_hdr_t *hdr, int rid) { return hdr->id[BCF_DT_CTG][rid].key; }

def _bcf_hdr_id2name(hdr: Ptr[_bcf_hdr_t], rid: int):
    return hdr[0].id(int(BCF_DT_CTG))[rid]._key

def _bcf_hdr_id2type(hdr: Ptr[_bcf_hdr_t], _type: i32, _int_id: i32):
    return (hdr[0]._id0[int(_int_id)]._val[0].info(int(_type)) >> u32(4)) & u32(0xf)

def _bcf_hdr_id2length(hdr: Ptr[_bcf_hdr_t], _type: i32, _int_id: i32):
    return (hdr[0]._id0[int(_int_id)]._val[0].info(int(_type)) >> u32(8)) & u32(0xf)

def _bcf_hdr_id2number(hdr: Ptr[_bcf_hdr_t], _type: i32, _int_id: i32):
    return hdr[0]._id0[int(_int_id)]._val[0].info(int(_type)) >> u32(12)

def _bcf_hdr_id2coltype(hdr: Ptr[_bcf_hdr_t], _type: i32, _int_id: i32):
    return hdr[0]._id0[int(_int_id)]._val[0].info(int(_type)) & u32(0xf)

# ((int_id<0 || bcf_hdr_id2coltype(hdr,type,int_id)==0xf) ? 0 : 1)
def _bcf_hdr_idinfo_exists(hdr: Ptr[_bcf_hdr_t], _type: i32, _int_id: i32):
    v = _int_id < i32(0) or (_bcf_hdr_id2coltype(hdr, _type, _int_id) == u32(0xf))
    return 0 if v else 1

def check_header_id(hdr: Ptr[_bcf_hdr_t], h1_type: i32, id: i32):
    n = hdr[0]._n0
    return id >= i32(0) and id < n and _bcf_hdr_idinfo_exists(hdr, h1_type, id)

def is_gt_fmt(hdr: Ptr[_bcf_hdr_t], fmt_id: i32):
    fmt = str.from_ptr(_bcf_hdr_int2id(hdr, BCF_DT_ID, fmt_id))
    return fmt == "GT"


def bcf_float_is_missing(f: i32):
    return 1 if f == i32(bcf_float_missing) else 0

def bcf_float_is_vector_end(f: i32):
    return 1 if f == i32(bcf_float_vector_end) else 0

#define bcf_gt_allele(val)      (((val)>>1)-1)
def bcf_gt_allele(val: int):
    return int((u64(val) >> u64(1)) - u64(1))

@tuple
class BCFHeaderMetaData:
    bcf_hdr: Ptr[_bcf_hdr_t]
    _type_code: int

    def __new__(bcf_hdr: Ptr[_bcf_hdr_t], _type_code: int) -> BCFHeaderMetaData:
        return (bcf_hdr, _type_code)

    @property
    def type_code(self):
        return self._type_code

    def __len__(self):
        n = 0
        for i in range(self.bcf_hdr[0].n(int(BCF_DT_ID))):
            idpair = self.bcf_hdr[0].id(int(BCF_DT_ID)) + i
            if idpair[0]._key and idpair[0]._val and idpair._val[0].info(int(self._type_code)) & 0xF != 0xF:
                n += 1
            return n

    def __iter__(self):
        for i in range(int(self.bcf_hdr[0].n(int(BCF_DT_ID)))):
            idpair = self.bcf_hdr[0].id(int(BCF_DT_ID)) + i
            idinfo: _bcf_idinfo_t = idpair[0]._val[0]

            if idpair[0]._key and idpair[0]._val and idinfo.info(int(self._type_code)) & u32(0xF) != u32(0xF):
                yield str.from_ptr(idpair[0]._key)

@tuple
class BCFHeaderContigs:
    bcf_hdr: Ptr[_bcf_hdr_t]

    def __new__(bcf_hdr: Ptr[_bcf_hdr_t]) -> BCFHeaderContigs:
        return (bcf_hdr,)

    def __iter__(self):
        for i in range(int(self.bcf_hdr[0].n(int(BCF_DT_CTG)))):
            yield str.from_ptr(_bcf_hdr_id2name(self.bcf_hdr, i))

@tuple
class BCFHeaderSamples:
    bcf_hdr: Ptr[_bcf_hdr_t]

    def __new__(bcf_hdr: Ptr[_bcf_hdr_t]) -> BCFHeaderSamples:
        return (bcf_hdr,)

    def __iter__(self):
        for i in range(int(self.bcf_hdr[0].n(int(BCF_DT_SAMPLE)))):
            yield str.from_ptr(self.bcf_hdr[0]._samples[i])

    def __getitem__(self, index: int):
        if index < 0 or index >= int(self.bcf_hdr[0].n(int(BCF_DT_SAMPLE))):
            raise IndexError('Invalid sample index')
        return str.from_ptr(self.bcf_hdr[0]._samples[index])

METADATA_TYPES = ('FILTER', 'INFO', 'FORMAT', 'CONTIG', 'STRUCTURED', 'GENERIC')
@tuple
class BCFHeaderRecord:
    bcf_hdr: Ptr[_bcf_hdr_t]
    bcf_hrec: Ptr[_bcf_hrec_t]

    def __new__(bcf_hdr: Ptr[_bcf_hdr_t], bcf_hrec: Ptr[_bcf_hrec_t]) -> BCFHeaderRecord:
        return (bcf_hdr, bcf_hrec)

    @property
    def hdr_type(self):
        if not self.bcf_hrec:
            return ''
        return METADATA_TYPES[int(self.bcf_hrec[0]._type)]

    @property
    def key(self):
        return str.from_ptr(self.bcf_hrec[0]._key) if self.bcf_hrec and self.bcf_hrec[0]._key else ''

    @property
    def value(self):
        return str.from_ptr(self.bcf_hrec[0]._value) if self.bcf_hrec and self.bcf_hrec[0]._value else ''

    @property
    def attrs(self):
        r = self.bcf_hrec[0]
        attrs = List[Tuple[str, str]]((str.from_ptr(r._keys[i]) if r._keys[i] else '',
                            str.from_ptr(r._vals[i]) if r._vals[i] else '')
                            for i in range(int(self.bcf_hrec[0]._nkeys)))
        return attrs

    def __getitem__(self, key: str):
        r = self.bcf_hrec
        if r:
            c_key = key.c_str()
            for i in range(int(r[0]._nkeys)):
                if r[0]._keys[i] and str.from_ptr(r[0]._keys[i]) == key:
                    return str.from_ptr(r[0]._vals[i]) if r[0]._vals[i] else ''
        raise KeyError('cant find key: ' + key)

    def get(self, key: str):
        try:
            return self[key]
        except KeyError:
            return ''

    def __iter__(self):
        r = self.bcf_hrec
        if r:
            for i in range(int(r[0]._nkeys)):
                if r[0]._keys[i]:
                    yield str.from_ptr(r[0]._keys[i])

    def iterkeys(self):
        return iter(self)

    def itervalues(self):
        r = self.bcf_hrec
        if r:
            for i in range(int(r[0]._nkeys)):
                if r[0]._keys[i]:
                    yield str.from_ptr(r[0]._vals[i]) if r[0].vals[i] else ''

    def iteritems(self):
        r = self.bcf_hrec
        if r:
            for i in range(int(r[0]._nkeys)):
                if r[0]._keys[i]:
                    val = str.from_ptr(r[0]._vals[i]) if r[0]._vals[i] else ''
                    key = str.from_ptr(r[0]._keys[i])
                    yield (key, val)

@tuple
class BCFHeader:
    bcf_hdr: Ptr[_bcf_hdr_t]

    def __new__(bcf_hdr: Ptr[_bcf_hdr_t]) -> BCFHeader:
        return (bcf_hdr,)

    def __new__() -> BCFHeader:
        return (Ptr[_bcf_hdr_t](),)

    @property
    def info(self):
        # get metadata for info fields in Header
        return BCFHeaderMetaData(self.bcf_hdr, int(BCF_HL_INFO))

    @property
    def filters(self):
        return BCFHeaderMetaData(self.bcf_hdr, int(BCF_HL_FLT))

    @property
    def formats(self):
        return BCFHeaderMetaData(self.bcf_hdr, int(BCF_HL_FMT))

    @property
    def contigs(self):
        return BCFHeaderContigs(self.bcf_hdr)

    @property
    def samples(self):
        return BCFHeaderSamples(self.bcf_hdr)

    def __iter__(self):
        for i in range(int(self.bcf_hdr[0]._nhrec)):
            yield BCFHeaderRecord(self.bcf_hdr, self.bcf_hdr[0]._hrec[i])

VALUE_TYPES = ('Flag', 'Integer', 'Float', 'String')
@tuple
class BCFMetadata:
    bcf_hdr: Ptr[_bcf_hdr_t]
    _type_code: int
    _id: int

    def __new__(bcf_hdr: Ptr[_bcf_hdr_t], _type_code: int, _id: int) -> BCFMetadata:
        return (bcf_hdr, _type_code, _id)

    @property
    def name(self):
        return str.from_ptr(self.bcf_hdr[0].id(int(BCF_DT_ID))[self._id]._key)

    @property
    def bcf_type(self):
        if not check_header_id(self.bcf_hdr, i32(self._type_code), i32(self._id)):
            raise ValueError('Invalid header id')
        if self._type_code == int(BCF_HL_FLT):
            return ''
        return VALUE_TYPES[int(_bcf_hdr_id2type(self.bcf_hdr, i32(self._type_code), i32(self._id)))]

    @property
    def record(self) -> BCFHeaderRecord:
        if not check_header_id(self.bcf_hdr, i32(self._type_code), i32(self._id)):
            raise ValueError('Invalid header id')

        hrec = self.bcf_hdr[0].id(int(BCF_DT_ID))[self._id]._val[0].hrec(int(self._type_code))
        if not hrec:
            raise ValueError("No header record")
        return BCFHeaderRecord(self.bcf_hdr, hrec)

    @property
    def description(self):
        return self.record.get('Description')

# type_code is one of BCF_BT_*, or BCF_HT_FLAG or BCF_AUX_NONE
# if array_flag is True, then BCFAux represents an array of type
# specified by type code
@tuple
class BCFAux:
    _p: cobj
    _type_code: i32
    _is_array: bool

    # accepts as T: i8, i16, i32
    @property
    def val[T](self):
        if self._is_array:
            raise TypeError("This BCFAux represents an array, not a single value")
        return Ptr[T](self._p)[0]

    @property
    def arr[T](self):
        if not self._is_array:
            raise TypeError("This BCFAux represents a single value, not an array")
        return Ptr[List[T]](self._p)[0]

    @property
    def type_code(self):
        return self._type_code

    @property
    def is_array(self):
        return self._is_array

def bcf_get_value_count(bcf1: Ptr[_bcf1_t], bcf_hdr: Ptr[_bcf_hdr_t], h1_type: i32, id: i32, sample: i32) -> Tuple[i64, i32]:
    if not check_header_id(bcf_hdr, h1_type, id):
        raise ValueError("Invalid header")

    length = _bcf_hdr_id2length(bcf_hdr, h1_type, id)
    number = _bcf_hdr_id2number(bcf_hdr, h1_type, id)

    scalar = i32(0)
    count = i64(0)

    if h1_type == BCF_HL_FMT and is_gt_fmt(bcf_hdr, id):
        count = i64(int(number))
    elif i32(length) == BCF_VL_FIXED:
        scalar = i32(1)
    elif i32(length) == BCF_VL_R:
        count = i64(int(bcf1[0].n_allele))
    elif i32(length) == BCF_VL_A:
        count = i64(int(bcf1[0].n_allele - u32(1)))

    # TODO https://github.com/pysam-developers/pysam/blob/master/pysam/libcbcf.pyx
    # Add support for genotype values
    # bcf_genotype_count
    # elif length == BCF_VL_G:
    #     count[0]
    elif i32(length) == BCF_VL_VAR:
        count = i64(-1)
    else:
        raise ValueError('Unknown format length')

    return (count, scalar)

def bcf_array_to_object(data: cobj, type_code: i32, n: i32, count: i64, scalar: i32) -> BCFAux:
    def bcf_num_array_to_object[T](data: cobj, type_code: i32, n: i32, vector_end: T, missing_val: T):
        arr = List[T]()
        nums = Ptr[T](data)
        for i in range(int(n)):
            if nums[i] == vector_end:
                break
            if nums[i] != missing_val:
                arr.append(nums[i])
        return BCFAux(__ptr__(arr).as_byte(), type_code, True)


    none_ret = BCFAux(data.as_byte(), BCF_AUX_NONE, False)
    if not data or n <= i32(0):
        return none_ret

    if type_code == BCF_BT_CHAR:
        datac = char_p(data)
        # check null terminator
        b: str = ""
        if datac[int(n)-1] == byte(bcf_str_vector_end):
            b = str.from_ptr(datac)
        else:
            copied_datac = char_p(int(n) + 1)
            for i in range(int(n)):
                copied_datac[i] = datac[i]
            copied_datac[int(n)] = byte(0)
            b = str.from_ptr(copied_datac)
        arr = List[str]()
        for c in b.split(','):
            if c.c_str()[0] != byte(bcf_str_missing):
                arr.append(c)
        return BCFAux(__ptr__(arr).as_byte(), BCF_BT_CHAR, True)

    else:
        if type_code == BCF_BT_INT8:
            return bcf_num_array_to_object[i8](data, BCF_BT_INT8, n, i8(bcf_int8_vector_end), i8(bcf_int8_missing))
        elif type_code == BCF_BT_INT16:
            return bcf_num_array_to_object[i16](data, BCF_BT_INT16, n, i16(bcf_int16_vector_end), i16(bcf_int16_missing))
        elif type_code == BCF_BT_INT32:
            return bcf_num_array_to_object[i32](data, BCF_BT_INT32, n, i32(bcf_int32_vector_end), i32(bcf_int32_missing))
        elif type_code == BCF_BT_FLOAT:
            arr = List[float]()
            nums = Ptr[i32](data)
            for i in range(int(n)):
                if bcf_float_is_vector_end(i32(nums[i])):
                    break
                if not bcf_float_is_missing(i32(nums[i])):
                    v = _C.seq_i32_to_float(nums[i])
                    arr.append(v)
            return BCFAux(__ptr__(arr).as_byte(), BCF_BT_FLOAT, True)
        else:
            raise TypeError('unsupported info type code')

    return none_ret

def bcf_info_get_value(bcf1: Ptr[_bcf1_t], bcf_hdr: Ptr[_bcf_hdr_t], info: Ptr[_bcf_info_t]) -> BCFAux:
    count_and_scalar = bcf_get_value_count(bcf1, bcf_hdr, BCF_HL_INFO, info[0]._key, i32(-1))
    count = count_and_scalar[0]
    scalar = count_and_scalar[1]

    i = info[0]
    t = i._type

    none_ret = BCFAux(bcf1.as_byte(), BCF_AUX_NONE, False)

    if i._len == i32(0):
        if _bcf_hdr_id2type(bcf_hdr, BCF_HL_INFO, i._key) == u32(BCF_HT_FLAG):
            value_p = Ptr[bool](1)
            value_p[0] = True
            # TODO BCF_HT_FLAG is the same as BCF_BT_NULL, this may lead to some confusion
            return BCFAux(value_p.as_byte(), BCF_HT_FLAG, False)
        elif scalar != i32(0):
            # no value
            return none_ret
        else:
            # no value
            return none_ret
    elif i._len == i32(1):
        value = i32(i.v1)
        if i._type == BCF_BT_INT8:
            return BCFAux(__ptr__(value).as_byte(), BCF_BT_INT8, False) if i._v1 != i32(bcf_int8_missing) else none_ret
        elif i._type == BCF_BT_INT16:
            return BCFAux(__ptr__(value).as_byte(), BCF_BT_INT16, False) if i._v1 != i32(bcf_int16_missing) else none_ret
        elif i._type == BCF_BT_INT32:
            return BCFAux(__ptr__(value).as_byte(), BCF_BT_INT32, False) if i._v1 != i32(bcf_int32_missing) else none_ret
        elif i._type == BCF_BT_FLOAT:
            value_f = Ptr[float](1)
            value_f[0] = _C.seq_i32_to_float(value)
            return BCFAux(value_f.as_byte(), BCF_BT_FLOAT, False) if not bcf_float_is_missing(i._v1) else none_ret
        elif i._type == BCF_BT_CHAR:
            return BCFAux(__ptr__(value).as_byte(), BCF_BT_CHAR, False)
        else:
            raise TypeError('unsupported info type code')
    else:
        return bcf_array_to_object(i._vptr.as_byte(), i._type, i._len, count, scalar)

def try_unpack(bcf1: Ptr[_bcf1_t], mode: i32):
    if bcf_unpack(bcf1.as_byte(), mode) < i32(0):
        raise ValueError('Error unpacking in VCFRecord')

@tuple
class VCFRecordInfo:
    bcf1: Ptr[_bcf1_t]
    bcf_hdr: Ptr[_bcf_hdr_t]
    # mapping from info keys: values

    def __new__(bcf1: Ptr[_bcf1_t], bcf_hdr: Ptr[_bcf_hdr_t]) -> VCFRecordInfo:
        return (bcf1, bcf_hdr)

    def __iter__(self):
        hdr = self.bcf_hdr
        r = self.bcf1
        try_unpack(r, BCF_UN_INFO)

        for i in range(int(r[0].n_info)):
            info = r[0]._d._info[i]
            if info._vptr:
                key = _bcf_hdr_int2id(hdr, BCF_DT_ID, info._key)
                key_s = str.from_ptr(key)
                if key_s != 'END':
                    yield key_s

    def __len__(self):
        count = 0
        for s in self:
            count += 1
        return count

    def _process_status(status: i32, key: str):
        n = int(status)
        if n >= 0:
            return
        if n == -1:
            raise KeyError(f"No info tag '{key}' in header")
        if n == -2:
            raise TypeError(f"Type clash between header and record for tag '{key}'")
        if n == -3:
            raise KeyError(f"No info tag '{key}' in record")
        if n == -4:
            raise ValueError(f"Fatal error when getting info for tag '{key}'")

    def get_int(self, key: str):
        p = Ptr[byte]()
        n = i32(0)
        status = bcf_get_info_values(self.bcf_hdr.as_byte(), self.bcf1.as_byte(), key.c_str(), __ptr__(p), __ptr__(n), BCF_HT_INT)
        VCFRecordInfo._process_status(status, key)
        if int(status) != 1:
            raise ValueError(f"Multiple values for tag '{key}'")
        x = Ptr[i32](p)[0]
        _C.free(p)
        return int(x)

    def get_ints(self, key: str):
        p = Ptr[byte]()
        n = i32(0)
        status = bcf_get_info_values(self.bcf_hdr.as_byte(), self.bcf1.as_byte(), key.c_str(), __ptr__(p), __ptr__(n), BCF_HT_INT)
        VCFRecordInfo._process_status(status, key)

        i = 0
        off = 0
        while i < int(status):
            x = Ptr[i32](p + off)[0]
            yield int(x)
            off += 4  # size of 32-bit float
            i += 1
        _C.free(p)

    def get_float(self, key: str):
        p = Ptr[byte]()
        n = i32(0)
        status = bcf_get_info_values(self.bcf_hdr.as_byte(), self.bcf1.as_byte(), key.c_str(), __ptr__(p), __ptr__(n), BCF_HT_REAL)
        VCFRecordInfo._process_status(status, key)
        if int(status) != 1:
            raise ValueError(f"Multiple values for tag '{key}'")
        x = Ptr[i32](p)[0]
        _C.free(p)
        return _C.seq_i32_to_float(x)

    def get_floats(self, key: str):
        p = Ptr[byte]()
        n = i32(0)
        status = bcf_get_info_values(self.bcf_hdr.as_byte(), self.bcf1.as_byte(), key.c_str(), __ptr__(p), __ptr__(n), BCF_HT_REAL)
        VCFRecordInfo._process_status(status, key)

        i = 0
        off = 0
        while i < int(status):
            x = Ptr[i32](p + off)[0]
            yield _C.seq_i32_to_float(x)
            off += 4  # size of 32-bit float
            i += 1
        _C.free(p)

    def get_str(self, key: str):
        p = Ptr[byte]()
        n = i32(0)
        status = bcf_get_info_values(self.bcf_hdr.as_byte(), self.bcf1.as_byte(), key.c_str(), __ptr__(p), __ptr__(n), BCF_HT_STR)
        VCFRecordInfo._process_status(status, key)
        count = int(status)
        buf = Ptr[byte](count)
        str.memcpy(buf, p, count)
        _C.free(p)
        return str(buf, count)

    def get_flag(self, key: str):
        p = Ptr[byte]()
        n = i32(0)
        status = bcf_get_info_values(self.bcf_hdr.as_byte(), self.bcf1.as_byte(), key.c_str(), __ptr__(p), __ptr__(n), BCF_HT_FLAG)
        VCFRecordInfo._process_status(status, key)
        return status == 1

    '''
    def __getitem__(self, key: str):
        hdr = self.bcf_hdr
        r = self.bcf1

        if key == "END":
            raise KeyError('END is a reserved key')
        try_unpack(r, BCF_UN_INFO)

        c_key = key.c_str()
        info = Ptr[_bcf_info_t](bcf_get_info(cobj(hdr), cobj(r), c_key))

        # TODO need to check for null info and implement bcf_header_get_info
        # see https://github.com/pysam-developers/pysam/blob/master/pysam/libcbcf.pyx#L545
        info_id = info[0]._key

        if info_id < i32(0):
            raise KeyError("Unknown info field: " + key)

        if not check_header_id(hdr, BCF_HL_INFO, info_id):
            raise ValueError("Invalid Header")

        # if flag then return whether points are not null
        if _bcf_hdr_id2type(hdr, BCF_HL_INFO, info_id) == u32(BCF_HT_FLAG):
            value_p = Ptr[bool](1)
            value_p[0] = info and info[0]._vptr
            return BCFAux(cobj(value_p), BCF_HT_FLAG, False)

        if not info or not info[0]._vptr:
            raise KeyError("Invalid info field: " + key)

        b = bcf_info_get_value(r, hdr, info)
        if b._type_code == BCF_HT_FLAG:
            raise KeyError(f"No key '{key}' in info field")
        return b

    def iterkeys(self):
        return iter(self)

    def itervalues(self):
        for k in self.iterkeys():
            yield self[k]

    def iteritems(self):
        for k in self.iterkeys():
            yield (k, self[k])
    '''

@tuple
class VCFRecordSample:
    bcf1: Ptr[_bcf1_t]
    bcf_hdr: Ptr[_bcf_hdr_t]
    index: int

    def __new__(bcf1: Ptr[_bcf1_t], bcf_hdr: Ptr[_bcf_hdr_t], index: int) -> VCFRecordSample:
        return (bcf1, bcf_hdr, index)

    @property
    def name(self):
        try_unpack(self.bcf1, BCF_UN_ALL)
        return str.from_ptr(self.bcf_hdr[0]._samples[self.index])

    # TODO, various operations like getting alleles, allele indices, phased, etc
    # see class VariantRecordSample at:
    # https://github.com/pysam-developers/pysam/blob/master/pysam/libcbcf.pyx
    @property
    def alleles(self) -> List[seq]:
        r = self.bcf1[0]
        bcf_hdr = self.bcf_hdr
        index = self.index

        nsamples = r.n_sample
        nalleles = int(r.n_allele)
        alleles = List[seq]()
        try_unpack(self.bcf1, BCF_UN_ALL)

        if index < 0 or index >= nsamples or not r.n_fmt:
            # TODO
            return alleles

        fmt0 = r._d._fmt[0]
        gt0 = is_gt_fmt(bcf_hdr, fmt0._id)

        if not gt0 or not fmt0._n:
            return alleles

        if fmt0._type == BCF_BT_INT8:
            data8 = Ptr[i8](fmt0._p + index * int(fmt0._size))
            for i in range(int(fmt0._n)):
                if int(data8[i]) == bcf_int8_vector_end:
                    break
                a = bcf_gt_allele(int(data8[i]))
                alleles.append(seq(str.from_ptr(r._d._allele[a]) if 0 <= a and a < nalleles else ''))
        if fmt0._type == BCF_BT_INT16:
            data16 = Ptr[i16](fmt0._p + index * int(fmt0._size))
            for i in range(int(fmt0._n)):
                if int(data16[i]) == bcf_int16_vector_end:
                    break
                a = bcf_gt_allele(int(data16[i]))
                alleles.append(seq(str.from_ptr(r._d._allele[a]) if 0 <= a and a < nalleles else ''))
        if fmt0._type == BCF_BT_INT32:
            data32 = Ptr[i32](fmt0._p + index * int(fmt0._size))
            for i in range(int(fmt0._n)):
                if int(data32[i]) == bcf_int32_vector_end:
                    break
                a = bcf_gt_allele(int(data32[i]))
                alleles.append(seq(str.from_ptr(r._d._allele[a]) if 0 <= a and a < nalleles else ''))
        return alleles

    def __str__(self):
        return self.name

@tuple
class VCFRecordSamples:
    bcf1: Ptr[_bcf1_t]
    bcf_hdr: Ptr[_bcf_hdr_t]

    def __new__(bcf1: Ptr[_bcf1_t], bcf_hdr: Ptr[_bcf_hdr_t]) -> VCFRecordSamples:
        return (bcf1, bcf_hdr)

    def __len__(self):
        return int(self.bcf1[0].n_sample)

    def __iter__(self):
        try_unpack(self.bcf1, BCF_UN_ALL)
        for i in range(int(len(self))):
            yield VCFRecordSample(self.bcf1, self.bcf_hdr, i)

    def __getitem__(self, key: str) -> VCFRecordSample:
        c_key = key.c_str()
        sample_index = int(bcf_hdr_id2int(self.bcf_hdr.as_byte(), BCF_DT_SAMPLE, c_key))
        if sample_index < 0 or sample_index >= self.bcf1[0].n_sample:
            raise KeyError('invalid sample name: ' + key)
        return VCFRecordSample(self.bcf1, self.bcf_hdr, sample_index)

@tuple
class VCFRecordFormat:
    bcf1: Ptr[_bcf1_t]
    bcf_hdr: Ptr[_bcf_hdr_t]

    def __new__(bcf1: Ptr[_bcf1_t], bcf_hdr: Ptr[_bcf_hdr_t]) -> VCFRecordFormat:
        return (bcf1, bcf_hdr)

    def __len__(self):
        return int(self.bcf1[0].n_fmt)

    def __iter__(self):
        try_unpack(self.bcf1, BCF_UN_FMT)
        for i in range(len(self)):
            fmt = self.bcf1[0]._d._fmt[i]
            if fmt._p:
                yield str.from_ptr(_bcf_hdr_int2id(self.bcf_hdr, BCF_DT_ID, fmt._id))

    def __getitem__(self, key: str) -> BCFMetadata:
        try_unpack(self.bcf1, BCF_UN_FMT)
        c_key = key.c_str()
        fmt = Ptr[_bcf_fmt_t](bcf_get_fmt(self.bcf_hdr.as_byte(), self.bcf1.as_byte(), c_key))

        if not fmt or not fmt[0]._p:
            raise KeyError('Unknown format: ' + key)

        return BCFMetadata(self.bcf_hdr, int(BCF_HL_FMT), int(fmt[0]._id))

@tuple
class VCFRecordFilter:
    bcf1: Ptr[_bcf1_t]
    bcf_hdr: Ptr[_bcf_hdr_t]

    def __new__(bcf1: Ptr[_bcf1_t], bcf_hdr: Ptr[_bcf_hdr_t]) -> VCFRecordFilter:
        return (bcf1, bcf_hdr)

    def __iter__(self):
        for i in range(int(self.bcf1[0]._d._n_flt)):
            yield str.from_ptr(_bcf_hdr_int2id(self.bcf_hdr, BCF_DT_ID, self.bcf1[0]._d._flt[i]))

    def __getitem__(self, key: str):
        c_key = key.c_str()
        _id = bcf_hdr_id2int(self.bcf_hdr.as_byte(), BCF_DT_ID, c_key)
        if not check_header_id(self.bcf_hdr, BCF_HL_FLT, _id) or not bcf_has_filter(self.bcf_hdr.as_byte(), self.bcf1.as_byte(), c_key):
            raise ValueError('Invalid header id')
        return BCFMetadata(self.bcf_hdr, int(BCF_HL_FLT), int(_id))

    def __len__(self):
        return int(self.bcf1[0]._d._n_flt)

# Modeled after:
# https://pysam.readthedocs.io/en/latest/api.html#pysam.VariantRecord
@tuple
class VCFRecord:
    bcf1: Ptr[_bcf1_t]
    bcf_hdr: Ptr[_bcf_hdr_t]

    def __new__(bcf1: Ptr[_bcf1_t], bcf_hdr: Ptr[_bcf_hdr_t]) -> VCFRecord:
        return (bcf1, bcf_hdr)

    @property
    def info(self):
        return VCFRecordInfo(self.bcf1, self.bcf_hdr)

    ''' XXX: removed for now until further testing
    @property
    def samples(self):
        return VCFRecordSamples(self.bcf1, self.bcf_hdr)

    @property
    def formats(self):
        return VCFRecordFormat(self.bcf1, self.bcf_hdr)

    @property
    def filters(self):
        return VCFRecordFilter(self.bcf1, self.bcf_hdr)
    '''

    @property
    def n_info(self):
        return int(self.bcf1[0].n_info)

    @property
    def chrom(self):
        return str.from_ptr(_bcf_hdr_id2name(self.bcf_hdr, int(self.bcf1[0]._rid)))

    @property
    def contig(self):
        return self.chrom

    @property
    def pos(self):
        return int(self.bcf1[0]._pos)

    @property
    def qual(self):
        return float(_C.seq_i32_to_float(i32(self.bcf1[0]._qual)))

    @property
    def ref(self):
        allele = self.bcf1[0]._d._allele
        return seq(str.from_ptr(allele[0]) if allele else '')

    @property
    def alts(self):
        b = self.bcf1[0]
        n = int(b.n_allele)
        allele = b._d._allele
        if not allele:
            return
        i = 1
        while i < n:
            yield seq(str.from_ptr(allele[i]) if allele else '')
            i += 1

    @property
    def id(self):
        _id = self.bcf1[0]._d._id
        # ascii code for '.' is 46. '.' indicates empty column
        return str.from_ptr(_id) if _id and _id[0] != byte(46) else ''

    @property
    def rlen(self):
        return int(self.bcf1[0]._rlen)

    def __str__(self):
        return "<VCFRecord: id: " + self.id + ", chrom: " + self.chrom + ", pos: " + str(self.pos) + ", rlen: " + str(self.rlen) + ", n_info: " + str(self.n_info) + ", qual: " + str(self.qual) + ", ref: " + str(self.ref) + ">"

class BCFReader:
    _bcf1_rec: _bcf1_t
    _file: cobj
    _hdr: BCFHeader
    _copy: bool
    _unpack_all: bool

    def __init__(self, path: str, unpack_all: bool, copy: bool):
        path_c_str = path.c_str()
        file = hts_open(path_c_str, "rb".c_str())
        if not file:
            raise IOError("file " + path + " could not be opened")

        bcf_clear(self.__raw__())
        self._file = file
        bcf_hdr = bcf_hdr_read(self._file)
        if not bcf_hdr:
            raise IOError("Failed to read VCF/BCF header")
        self._hdr = BCFHeader(Ptr[_bcf_hdr_t](bcf_hdr))
        self._copy = copy
        self._unpack_all = unpack_all

    @property
    def _bcf_hdr(self):
        return self._hdr.bcf_hdr

    ''' XXX: removed for now until further testing
    @property
    def header(self):
        return self._hdr
    '''

    def _ensure_open(self):
        if not self._file:
            raise IOError("I/O operation on closed VCF/BCF file")

    def __iter__(self):
        self._ensure_open()
        while True:
            status = int(bcf_read(self._file, self._bcf_hdr.as_byte(), self.__raw__()))
            if status == 0:
                p = Ptr[_bcf1_t](self.__raw__())
                if self._copy:
                    p = Ptr[_bcf1_t](1)
                    p[0] = copy(self._bcf1_rec)

                try_unpack(p, BCF_UN_ALL if self._unpack_all else BCF_UN_FLT)
                yield VCFRecord(p, self._bcf_hdr)
            elif status == -1:
                # end of file
                break
            elif status < -1:
                raise IOError("Critical error while reading BCF file")
            else:
                break
        self.close()

    def close(self):
        if self._file:
            hts_close(self._file)

        if self._bcf_hdr:
            bcf_hdr_destroy(self._bcf_hdr.as_byte())

        bcf_empty(self.__raw__())

        self._file = cobj()
        self._hdr = BCFHeader()

    def __enter__(self):
        pass

    def __exit__(self):
        self.close()

VCFReader = BCFReader

def BCF(path: str, unpack_all: bool = True, copy: bool = True):
    return BCFReader(path, unpack_all, copy)

def VCF(path: str, unpack_all: bool = True, copy: bool = True):
    return VCFReader(path, unpack_all, copy)
