
"""Local Composition Complexity."""

import math

def lcc_mult(s, wsize: int):
    """
    lcc_mult(s, wsize)

    Calculate Local Composition Complexity (LCC) values over sliding window.
    
    Returns a list of floats, the LCC values for a sliding window over
    the sequence.
    """
    l2 = math.log(2.0)
    tamseq = len(s)

    upper = s.upper()
    
    compone = [0.0]
    lccsal = [0.0]
    for i in range(wsize):
        compone.append(
            ((i + 1) / float(wsize)) * ((math.log((i + 1) / float(wsize))) / l2)
        )
    window = s[0:wsize]
    cant_a = window.count("A")
    cant_c = window.count("C")
    cant_t = window.count("T")
    cant_g = window.count("G")
    term_a = compone[cant_a]
    term_c = compone[cant_c]
    term_t = compone[cant_t]
    term_g = compone[cant_g]
    lccsal.append(-(term_a + term_c + term_t + term_g))
    tail = s[0]
    for x in range(tamseq - wsize):
        window = upper[x + 1 : wsize + x + 1]
        if tail == window[-1]:
            lccsal.append(lccsal[-1])
        elif tail == "A":
            cant_a -= 1
            if window.endswith("C"):
                cant_c += 1
                term_a = compone[cant_a]
                term_c = compone[cant_c]
                lccsal.append(-(term_a + term_c + term_t + term_g))
            elif window.endswith("T"):
                cant_t += 1
                term_a = compone[cant_a]
                term_t = compone[cant_t]
                lccsal.append(-(term_a + term_c + term_t + term_g))
            elif window.endswith("G"):
                cant_g += 1
                term_a = compone[cant_a]
                term_g = compone[cant_g]
                lccsal.append(-(term_a + term_c + term_t + term_g))
        elif tail == "C":
            cant_c -= 1
            if window.endswith("A"):
                cant_a += 1
                term_a = compone[cant_a]
                term_c = compone[cant_c]
                lccsal.append(-(term_a + term_c + term_t + term_g))
            elif window.endswith("T"):
                cant_t += 1
                term_c = compone[cant_c]
                term_t = compone[cant_t]
                lccsal.append(-(term_a + term_c + term_t + term_g))
            elif window.endswith("G"):
                cant_g += 1
                term_c = compone[cant_c]
                term_g = compone[cant_g]
                lccsal.append(-(term_a + term_c + term_t + term_g))
        elif tail == "T":
            cant_t -= 1
            if window.endswith("A"):
                cant_a += 1
                term_a = compone[cant_a]
                term_t = compone[cant_t]
                lccsal.append(-(term_a + term_c + term_t + term_g))
            elif window.endswith("C"):
                cant_c += 1
                term_c = compone[cant_c]
                term_t = compone[cant_t]
                lccsal.append(-(term_a + term_c + term_t + term_g))
            elif window.endswith("G"):
                cant_g += 1
                term_t = compone[cant_t]
                term_g = compone[cant_g]
                lccsal.append(-(term_a + term_c + term_t + term_g))
        elif tail == "G":
            cant_g -= 1
            if window.endswith("A"):
                cant_a += 1
                term_a = compone[cant_a]
                term_g = compone[cant_g]
                lccsal.append(-(term_a + term_c + term_t + term_g))
            elif window.endswith("C"):
                cant_c += 1
                term_c = compone[cant_c]
                term_g = compone[cant_g]
                lccsal.append(-(term_a + term_c + term_t + term_g))
            elif window.endswith("T"):
                cant_t += 1
                term_t = compone[cant_t]
                term_g = compone[cant_g]
                lccsal.append(-(term_a + term_c + term_t + term_g))
        tail = window[0]
    return lccsal


def lcc_simp(s):
    """
    lcc_simp(s)
    
    Calculate Local Composition Complexity (LCC) for a sequence.
    """
    wsize = len(s)
    term_a = 0.0
    term_c = 0.0
    term_t = 0.0
    term_g = 0.0


    upper = s.upper()

    l2 = math.log(2.0)
    if "A" in s:
        term_a = ((upper.count("A")) / float(wsize)) * (
            (math.log((upper.count("A")) / float(wsize))) / l2
        )
    if "C" in s:
        term_c = ((upper.count("C")) / float(wsize)) * (
            (math.log((upper.count("C")) / float(wsize))) / l2
        )
    if "T" in s:
        term_t = ((upper.count("T")) / float(wsize)) * (
            (math.log((upper.count("T")) / float(wsize))) / l2
        )
    if "G" in s:
        term_g = ((upper.count("G")) / float(wsize)) * (
            (math.log((upper.count("G")) / float(wsize))) / l2
        )
    return -(term_a + term_c + term_t + term_g)