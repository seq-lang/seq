class deque[T]:
    _arr: Array[T]
    _head: int
    _tail: int
    _maxlen: int

    def __init__(self, arr: Array[T], head: int, tail: int, maxlen: int):
        self._arr = arr
        self._head = head
        self._tail = tail
        self._maxlen = maxlen

    def __init__(self):
        self._arr = Array[T](16)
        self._head = 0
        self._tail = 0
        self._maxlen = -1

    def __init__(self, maxlen: int):
        cap = 1
        while cap < maxlen:
            cap *= 2
        self._arr = Array[T](cap)
        self._head = 0
        self._tail = 0
        self._maxlen = maxlen

    def __init__(self, it: Generator[T]):
        self._arr = Array[T](16)
        self._head = 0
        self._tail = 0
        self._maxlen = -1
        for i in it:
            self.append(i)

    @property
    def maxlen(self):
        return self._maxlen

    def _double_cap(self):
        p = self._head
        n = len(self._arr)
        r = n - p
        new_cap = n * 2
        new_arr = Array[T](new_cap)
        for i in range(r):
            new_arr[i] = self._arr[p + i]
        for i in range(p):
            new_arr[i + r] = self._arr[i]
        self._arr = new_arr
        self._head = 0
        self._tail = n

    def _check_not_empty(self):
        if not self:
            raise IndexError("pop from an empty deque")

    def __bool__(self):
        return self._head != self._tail

    def __len__(self):
        return (self._tail - self._head) & (len(self._arr) - 1)

    def appendleft(self, x: T):
        self._head = (self._head - 1) & (len(self._arr) - 1)
        self._arr[self._head] = x
        if self._maxlen >= 0 and len(self) > self._maxlen:
            self.pop()
        if self._head == self._tail:
            self._double_cap()

    def append(self, x: T):
        self._arr[self._tail] = x
        self._tail = (self._tail + 1) & (len(self._arr) - 1)
        if self._maxlen >= 0 and len(self) > self._maxlen:
            self.popleft()
        if self._head == self._tail:
            self._double_cap()

    def popleft(self):
        self._check_not_empty()
        res = self._arr[self._head]
        self._head = (self._head + 1) & (len(self._arr) - 1)
        return res

    def pop(self):
        self._check_not_empty()
        self._tail = (self._tail - 1) & (len(self._arr) - 1)
        return self._arr[self._tail]

    def clear(self):
        self._head = 0
        self._tail = 0

    def __iter__(self):
        i = self._head
        while i != self._tail:
            yield self._arr[i]
            i = (i + 1) & (len(self._arr) - 1)

    def __contains__(self, x: T):
        for i in self:
            if i == x:
                return True
        return False

    def __copy__(self):
        return deque[T](copy(self._arr), self._head, self._tail, self._maxlen)

    def copy(self):
        return self.__copy__()

    def __str__(self):
        return str(List[T](iter(self)))

    def _idx_check(self, idx: int, msg: str):
        if self._head == self._tail or idx >= len(self) or idx < 0:
            raise IndexError(msg)

    @property
    def left(self):
        self._idx_check(0, "list index out of range")
        return self._arr[self._head]

    def __getitem__(self, idx: int):
        if idx < 0:
            idx += len(self)
        self._idx_check(idx, "list index out of range")
        if self._head <= self._tail:
            return self._arr[self._head + idx]
        elif self._head + idx < len(self._arr):
            return self._arr[self._head + idx]
        else:
            idx -= len(self._arr) - self._head
            assert 0 <= idx < self._tail
            return self._arr[idx]


def namedtuple():  # internal
    pass
