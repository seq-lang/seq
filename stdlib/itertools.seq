import math
import collections

def combinations[T](pool: Generator[T], r: int):
    """
    Return successive r-length combinations of elements in the iterable.

    combinations(range(4), 3) --> (0,1,2), (0,1,3), (0,2,3), (1,2,3)
    """
    pool_list = [a for a in pool]
    n = len(pool_list)
    if r > n:
        return
    indices = list(range(r).__iter__())
    yield [pool_list[i] for i in indices]
    while True:
        b = -1
        for i in reversed(range(r)):
            if indices[i] != i + n - r:
                b = i
                break
        if b == -1:
            return
        indices[b] += 1
        for j in range(b+1, r):
            indices[j] = indices[j-1] + 1
        yield [pool_list[i] for i in indices]

def combinations_with_replacement[T](pool: Generator[T], r: int):
    """
    Return successive r-length combinations of elements in the iterable
    allowing individual elements to have successive repeats.
    """
    if r < 0:
        raise ValueError("r must be a positive integer.")
    pool_list = [a for a in pool]
    n = len(pool_list)
    if not n and r:
        return
    indices = [0] * r
    yield [pool_list[i] for i in indices]
    while True:
        b = -1
        for i in reversed(range(r)):
            if indices[i] != n - 1:
                b = i
                break
        if b == -1:
            return

        indices = [indices[i] for i in range(b)] + [indices[b]+1 for i in range(r-b)]
        yield [pool_list[indices[i]] for i in range(len(indices))]

def islice[T](iterable: Generator[T], start: int, stop: int, step: int):
    """
    Make an iterator that returns selected elements from the iterable.

    unlike python, seq requires start, stop and step for now.
    default: start = 0, stop = len(iterable), step = 1
    """
    if start < 0 or stop < 0:
        raise ValueError("Indices for islice() must be None or an integer: 0 <= x <= maxint")
    elif step < 0:
        raise ValueError("Step for islice() must be a positive integer or None.")
    elif stop <= start:
        if iterable.done():
            iterable.destroy()
            return
        element = iterable.next()
        iterable.destroy()
        yield element

    # Consume *iterable* up to the *start* position.
    for i in range(start):
        if iterable.done():
            iterable.destroy()
            return
        iterable.next()

    # Consume to *stop*.
    for i in range(start, stop, step):
        if iterable.done():
            iterable.destroy()
            return
        element = iterable.next()

        iterable.destroy()
        yield element

        # consume step amount
        for i in range(step-1):
            if iterable.done():
                iterable.destroy()
                return
            iterable.next()

def count(start: float, step: float):
    """
    Return a count object whose __next__ method returns consecutive values.
    default: start = 0.0, step = 1.0
    """
    n = start
    while True:
        yield n
        n += step

def repeat(object, times: int):
    """

    default for times = None, for now seq will use -1
    """
    if times == -1:
        yield object
    else:
        for i in range(times):
            yield object

def cycle[T](iterable: Generator[T]):
    """
    fixed
    """
    saved = [T()] * 0
    for element in iterable:
        yield element
        saved.append(element)
    while saved:
        for element in saved:
              yield element

def compress[S,T](data: Generator[S], selectors: Generator[T]):
    """
    Return data elements corresponding to true selector elements.

    Forms a shorter iterator from selected data elements using the selectors to
    choose the data elements.
    """
    return (d for d, s in zip(data, selectors) if s)

def dropwhile[T](predicate: Callable[bool,T], iterable: Generator[T]):
    """
    Drop items from the iterable while predicate(item) is true.

    Afterwards, return every element until the iterable is exhausted.
    """
    it = iter(iterable)
    for x in it:
        if not predicate(x):
            yield x
            break
    for x in it:
        yield x

def takewhile[T](predicate: Callable[bool,T], iterable: Generator[T]):
    """
    Return successive entries from an iterable as long as the predicate evaluates to true for each entry.
    """
    for x in iterable:
        if predicate(x):
            yield x
        else:
            break

def filterfalse[T](predicate: Callable[bool,T], iterable: Generator[T]):
    """
    Return those items of iterable for which function(item) is false.

    Unlike python, seq will not allow predicate to equal None for now.
        if predicate is None:
            predicate = bool
    """
    for x in iterable:
        if not predicate(x):
            yield x

def permutations[T](pool: Generator[T], r: Optional[int] = None) -> Generator[List[T]]:
    """
    Return successive r-length permutations of elements in the iterable.
    """
    pool_list = [a for a in pool]
    n = len(pool_list)
    rx = ~r if r else n
    if rx > n:
        return

    indices = list(iter(range(n)))
    cycles = list(iter(range(n, n-rx, -1)))
    yield [pool_list[i] for i in indices[:rx]]
    while n:
        b = -1
        for i in reversed(range(rx)):
            cycles[i] -= 1
            if cycles[i] == 0:
                indices = indices[:i] + indices[i+1:] + indices[i:i+1]
                cycles[i] = n - i
            else:
                b = i
                j = cycles[i]
                indices[i], indices[-j] = indices[-j], indices[i]
                yield [pool_list[i] for i in indices[:rx]]
                break
        if b == -1:
            return

def accumulate[T,S](iterable: Generator[T], func: Callable[S,S,T], initial: S):
    """
    Return series of accumulated sums (or other binary function results).

    Default: func = operator.add, initial = None.
    For now seq will assume initial is None.
    """
    it = iter(iterable)
    if not it.done():
        total = it.next()
        yield total
        while not it.done():
            total = func(total, it.next())
            yield total
        it.destroy()
    else:
        it.destroy()
        return

def chain(iterables):
    """
    For now chain() == chain.from_iterable()
    """
    for it in iterables:
        for element in it:
            yield element

def starmap(function, iterable):
    """
    Return an iterator whose values are returned from the function
    evaluated with an argument tuple taken from the given sequence.
    """
    for args in iterable:
        yield function(args[0], args[1])

def groupby[V](iterable: Generator[V], key = Optional[int]()):
    """
    make an iterator that returns consecutive keys and groups from the iterable

    iterable:
        Elements to divide into groups according to the key function.
    key:
        A function for computing the group category for each element.
        If the key function is not specified or is None, the element itself
        is used for grouping.

    Deals with only strings for now.
    """
    if iterable.done():
        iterable.destroy()
        return

    if not isinstance(key, Optional):
        currvalue = iterable.next()
        currkey = key(currvalue)
        group = [currvalue]

        while not iterable.done():
            currvalue = iterable.next()
            k = key(currvalue)

            if k != currkey:
                yield currkey, group
                currkey = k
                group = List[V]()
            group.append(currvalue)
        yield currkey, group
    else:
        currvalue = iterable.next()
        currkey = currvalue
        group = [currvalue]

        while not iterable.done():
            currvalue = iterable.next()
            k = currvalue

            if k != currkey:
                yield currkey, group
                currkey = k
                group = List[V]()
            group.append(currvalue)
        yield currkey, group
    iterable.destroy()

def zip_longest[T](a: Generator[T], b: Generator[T], fillvalue: T):
    a_done = False
    b_done = False

    while not a.done():
        a_val = a.next()
        b_val = fillvalue
        if not b_done:
            b_done = b.done()
            if not b_done: b_val = b.next()
        yield a_val, b_val

    if not b_done:
        while not b.done():
            yield fillvalue, b.next()

    a.destroy()
    b.destroy()

def product(a, b, equals_ok: bool = True):
    """
    Return a Cartesian product of a and b.
    """
    for i in a:
        for j in b:
            if equals_ok or i != j:
                yield (i, j)


'''
def tee(iterable, n):
    """
    Needs implementing.
    """
    pass
'''
