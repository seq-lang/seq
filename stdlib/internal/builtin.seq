from internal.gc import alloc_atomic, free
from C import strtoll(cobj, Ptr[cobj], i32) -> int

@tuple
class min[T]:
    def __new__(a: T, b: T) -> T:
        return a if a < b else b

    def __new__(a: T, b: T, c: T) -> T:
        x = a if a < b else b
        return x if x < c else c

    def __new__(a: T, b: T, c: T, d: T) -> T:
        x = a if a < b else b
        y = c if c < d else d
        return x if x < y else y

    def __new__(a: T, b: T, c: T, d: T, e: T) -> T:
        x = a if a < b else b
        y = c if c < d else d
        z = x if x < y else y
        return z if z < e else e

    def __new__(a: Generator[T]) -> T:
        x = a.__iter__()
        if not x.done():
            s = x.next()
            while not x.done():
                i = x.next()
                if i < s: s = i
            x.destroy()
            return s
        else:
            x.destroy()
        raise ValueError("empty sequence")

@tuple
class max[T]:
    def __new__(a: T, b: T) -> T:
        return a if a > b else b

    def __new__(a: T, b: T, c: T) -> T:
        x = a if a > b else b
        return x if x > c else c

    def __new__(a: T, b: T, c: T, d: T) -> T:
        x = a if a > b else b
        y = c if c > d else d
        return x if x > y else y

    def __new__(a: T, b: T, c: T, d: T, e: T) -> T:
        x = a if a > b else b
        y = c if c > d else d
        z = x if x > y else y
        return z if z > e else e

    def __new__(a: Generator[T]) -> T:
        x = a.__iter__()
        if not x.done():
            s = x.next()
            while not x.done():
                i = x.next()
                if i > s: s = i
            x.destroy()
            return s
        else:
            x.destroy()
        raise ValueError("empty sequence")

def min2(a, b):
    return a if a < b else b

def max2(a, b):
    return a if a > b else b

def len(x):
    """
    Return the length of x
    """
    return x.__len__()

def iter(x):
    """
    Return an iterator for the given object
    """
    return x.__iter__()

def copy(x):
    """
    Return a copy of x
    """
    return x.__copy__()

def abs(x):
    """
    Return the absolute value of x
    """
    return x.__abs__()

def hash(x):
    """
    Returns hashed value only for immutable objects
    """
    return x.__hash__()

def ord(s: str):
    """
    Return an integer representing the Unicode code point of s
    """
    if len(s) != 1:
        raise TypeError("ord() expected a character, but string of length " + str(len(s)) + " found")
    return int(s.ptr[0])

def chr(i: int):
    """
    Return a string representing a character whose Unicode
    code point is an integer
    """
    p = cobj(1)
    p[0] = byte(i)
    return str(p, 1)

def next[T](g: Generator[T], default: Optional[T] = None):
    """
    Return the next item from g
    """
    if g.done():
        if default:
            return ~default
        else:
            raise StopIteration()
    return g.next()

def any(x):
    """
    Returns True if any item in x is true,
    False otherwise
    """
    for a in x:
        if a:
            return True
    return False

def all(x):
    """
    Returns True when all elements in x are true,
    False otherwise
    """
    for a in x:
        if not a:
            return False
    return True

def zip(a, b):
    """
    Returns a zip object, which is an iterator of tuples
    that aggregates elements based on the iterables passed
    """
    bi = iter(b)
    for i in a:
        if bi.done(): break
        yield (i, bi.next())
    bi.destroy()

def filter(f, x):
    """
    Returns all a from the iterable x that are filtered by f
    """
    for a in x:
        if f(a):
            yield a

def map(f, x):
    """
    Applies a function on all a in x and returns map object
    """
    for a in x:
        yield f(a)

def enumerate(x, start: int = 0):
    """
    Creates a tuple containing a count (from start which defaults
    to 0) and the values obtained from iterating over x
    """
    i = start
    for a in x:
        yield (i,a)
        i += 1

def echo(x):
    """
    Print and return argument
    """
    print x
    return x

def reversed(x):
    """
    Return an iterator that accesses x in the reverse order
    """
    return x.__reversed__()

def round(x, n) -> float:
    """
    Return the x rounded off to the given
    n digits after the decimal point.
    """
    nx = float.__pow__(10.0, n)
    return float.__round__(x * nx) / nx

def sum(xi):
    """
    Return the sum of the items added together from xi
    """
    x = iter(xi)
    if not x.done():
        s = x.next()
        while not x.done():
            s += x.next()
        x.destroy()
        return s
    else:
        x.destroy()

def repr(x):
    """    Return the string representation of x
    """
    return x.__repr__()

@extend
class int:
    def _from_str(s: str, base: int):
        if base < 0 or base > 36 or base == 1:
            raise ValueError("int() base must be >= 2 and <= 36, or 0")

        buf = __array__[byte](32)
        n = len(s)
        need_dyn_alloc = (n >= len(buf))

        p = alloc_atomic(n + 1) if need_dyn_alloc else buf.ptr
        str.memcpy(p, s.ptr, n)
        p[n] = byte(0)

        end = cobj()
        result = strtoll(p, __ptr__(end), i32(base))

        if need_dyn_alloc:
            free(p)

        if end != p + n:
            raise ValueError("invalid literal for int() with base " + str(base) + ": " + s)

        return result
