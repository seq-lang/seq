import os
from internal.dlopen import dlext
LD = os.getenv('SEQ_PYTHON', default='libpython.' + dlext())

from C import LD.PyUnicode_AsEncodedString(cobj, cobj, cobj) -> cobj
from C import LD.PyBytes_AsString(cobj) -> cobj
from C import LD.PyErr_Fetch(Ptr[cobj], Ptr[cobj], Ptr[cobj])
from C import LD.PyObject_GetAttrString(cobj, cobj) -> cobj
from C import LD.PyObject_GetAttr(cobj, cobj) -> cobj
from C import LD.PyObject_Str(cobj) -> cobj
from C import LD.PyRun_SimpleString(cobj)
from C import LD.Py_IncRef(cobj)
from C import LD.Py_DecRef(cobj)
from C import LD.PyObject_Call(cobj, cobj, cobj) -> cobj
from C import LD.PyObject_SetAttrString(cobj, cobj, cobj) -> cobj
from C import LD.PyObject_Length(cobj) -> int
from C import LD.Py_Initialize()
from C import LD.PyImport_ImportModule(cobj) -> cobj
from C import LD.PyLong_FromLong(int) -> cobj
from C import LD.PyLong_AsLong(cobj) -> int
from C import LD.PyFloat_FromDouble(float) -> cobj
from C import LD.PyFloat_AsDouble(cobj) -> float
from C import LD.PyBool_FromLong(int) -> cobj
from C import LD.PyObject_IsTrue(cobj) -> int
from C import LD.PyUnicode_DecodeFSDefaultAndSize(cobj, int) -> cobj
from C import LD.PyTuple_New(int) -> cobj
from C import LD.PyTuple_SetItem(cobj, int, cobj)
from C import LD.PyTuple_GetItem(cobj, int) -> cobj
from C import LD.PyList_New(int) -> cobj
from C import LD.PyList_SetItem(cobj, int, cobj) -> cobj
from C import LD.PyList_GetItem(cobj, int) -> cobj
from C import LD.PySet_New(cobj) -> cobj
from C import LD.PySet_Add(cobj, cobj) -> cobj
from C import LD.PyDict_New() -> cobj
from C import LD.PyDict_SetItem(cobj, cobj, cobj) -> cobj
from C import LD.PyDict_Next(cobj, Ptr[int], Ptr[cobj], Ptr[cobj]) -> int
from C import LD.PyObject_GetIter(cobj) -> cobj
from C import LD.PyIter_Next(cobj) -> cobj

_PY_MODULE_CACHE = Dict[str, pyobj]()

_PY_INITIALIZED = False
def init():
    global _PY_INITIALIZED
    if _PY_INITIALIZED:
        return
    Py_Initialize()
    _PY_INITIALIZED = True

def ensure_initialized():
    if not _PY_INITIALIZED:
        init()
        # raise ValueError("Python not initialized; make sure to 'import python'")

@extend
class pyobj:
    def __new__(p: Ptr[byte]) -> pyobj:
        return (p, )

    def _getattr(self, name: str):
        return pyobj.exc_wrap(pyobj(PyObject_GetAttrString(self.p, name.c_str())))

    def __getitem__(self, t):
        return self._getattr("__getitem__")(t)

    def __add__(self, t):
        return self._getattr("__add__")(t)

    def __setitem__(self, name: str, val: pyobj):
        return pyobj.exc_wrap(pyobj(PyObject_SetAttrString(self.p, name.c_str(), val.p)))

    def __len__(self):
        return pyobj.exc_wrap(PyObject_Length(self.p))

    def __to_py__(self):
        return self

    def __from_py__(self):
        return self

    def __str__(self):
        return str.__from_py__(self._getattr("__str__").__call__())

    def __iter__(self):
        it = PyObject_GetIter(self.p)
        if not it:
            raise ValueError("Python object is not iterable")
        while i := PyIter_Next(it):
            yield pyobj(pyobj.exc_wrap(i))
            pyobj(i).decref()
        pyobj(it).decref()
        pyobj.exc_check()

    def to_str(self, errors: str, empty: str = "") -> str:
        obj = PyUnicode_AsEncodedString(self.p, "utf-8".c_str(), errors.c_str())
        if obj == cobj():
            return empty
        bts = PyBytes_AsString(obj)
        pyobj(obj).decref()
        return str.from_ptr(bts)

    def exc_check():
        ptype, pvalue, ptraceback = cobj(), cobj(), cobj()
        PyErr_Fetch(__ptr__(ptype), __ptr__(pvalue), __ptr__(ptraceback))
        if ptype != cobj():
            py_msg = PyObject_Str(pvalue) if pvalue != cobj() else pvalue
            msg = pyobj(py_msg).to_str("ignore", "<empty Python message>")
            typ = pyobj.to_str(pyobj(PyObject_GetAttrString(ptype, "__name__".c_str())), "ignore")

            pyobj(ptype).decref()
            pyobj(pvalue).decref()
            pyobj(ptraceback).decref()
            pyobj(py_msg).decref()

            raise PyError(msg, typ)

    def exc_wrap(_retval):
        pyobj.exc_check()
        return _retval

    def incref(self):
        Py_IncRef(self.p)

    def decref(self):
        Py_DecRef(self.p)

    def __call__(self, *args, **kwargs) -> pyobj:
        names = iter(kwargs.__dict__())
        kws = Dict[str, pyobj]()
        if staticlen(kwargs) > 0:
            kws = {next(names): i.__to_py__() for i in kwargs}
        return pyobj.exc_wrap(pyobj(PyObject_Call(self.p, args.__to_py__().p, kws.__to_py__().p)))

    def _tuple_new(length: int) -> pyobj:
        t = PyTuple_New(length)
        pyobj.exc_check()
        return pyobj(t)

    def _tuple_set(self, idx: int, val: pyobj):
        PyTuple_SetItem(self.p, idx, val.p)
        pyobj.exc_check()

    def _tuple_get(self, idx: int) -> pyobj:
        t = PyTuple_GetItem(self.p, idx)
        pyobj.exc_check()
        return pyobj(t)

    def _import(name: str):
        ensure_initialized()
        if name in _PY_MODULE_CACHE:
            return _PY_MODULE_CACHE[name]
        m = pyobj.exc_wrap(pyobj(PyImport_ImportModule(name.c_str())))
        _PY_MODULE_CACHE[name] = m
        return m

    def _exec(code: str):
        ensure_initialized()
        PyRun_SimpleString(code.c_str())

    def get[T](self) -> T:
        return T.__from_py__(self)

def none():
    raise NotImplementedError()


# Type conversions

def py(x) -> pyobj:
    return x.__to_py__()

def get[T](x: pyobj) -> T:
    return T.__from_py__(x)

@extend
class int:
    def __to_py__(self) -> pyobj:
        return pyobj.exc_wrap(pyobj(PyLong_FromLong(self)))

    def __from_py__(i: pyobj):
        return pyobj.exc_wrap(PyLong_AsLong(i.p))

@extend
class float:
    def __to_py__(self) -> pyobj:
        return pyobj.exc_wrap(pyobj(PyFloat_FromDouble(self)))

    def __from_py__(d: pyobj):
        return pyobj.exc_wrap(PyFloat_AsDouble(d.p))

@extend
class bool:
    def __to_py__(self) -> pyobj:
        return pyobj.exc_wrap(pyobj(PyBool_FromLong(int(self))))

    def __from_py__(b: pyobj):
        return pyobj.exc_wrap(PyObject_IsTrue(b.p)) != 0

@extend
class byte:
    def __to_py__(self) -> pyobj:
        return str.__to_py__(str(__ptr__(self), 1))

    def __from_py__(c: pyobj):
        return str.__from_py__(c).p[0]

@extend
class str:
    def __to_py__(self) -> pyobj:
        return pyobj.exc_wrap(pyobj(PyUnicode_DecodeFSDefaultAndSize(self.ptr, self.len)))

    def __from_py__(s: pyobj):
        r = s.to_str("strict")
        pyobj.exc_check()
        return r

@extend
class List[T]:
    def __to_py__(self) -> pyobj:
        pylist = PyList_New(len(self))
        pyobj.exc_check()
        idx = 0
        for a in self:
            PyList_SetItem(pylist, idx, py(a).p)
            pyobj.exc_check()
            idx += 1
        return pyobj(pylist)

    def __from_py__(v: pyobj):
        n = v.__len__()
        t = List[T](n)
        for i in range(n):
            elem = pyobj(PyList_GetItem(v.p, i))
            pyobj.exc_check()
            t.append(get[T](elem))
        return t

@extend
class Dict[K, V]:
    def __to_py__(self) -> pyobj:
        pydict = PyDict_New()
        pyobj.exc_check()
        for k,v in self.items():
            PyDict_SetItem(pydict, py(k).p, py(v).p)
            pyobj.exc_check()
        return pyobj(pydict)

    def __from_py__(d: pyobj):
        b = Dict[K,V]()
        pos = 0
        k_ptr = cobj()
        v_ptr = cobj()
        while PyDict_Next(d.p, __ptr__(pos), __ptr__(k_ptr), __ptr__(v_ptr)):
            pyobj.exc_check()
            k = get[K](pyobj(k_ptr))
            v = get[V](pyobj(v_ptr))
            b[k] = v
        return b

@extend
class Set[K]:
    def __to_py__(self) -> pyobj:
        pyset = PySet_New(cobj())
        pyobj.exc_check()
        for a in self:
            PySet_Add(pyset, py(a).p)
            pyobj.exc_check()
        return pyobj(pyset)

