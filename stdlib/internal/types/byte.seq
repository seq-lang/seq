from C import seq_str_byte(byte) -> str

@extend
class byte:
    @llvm
    def __new__() -> byte:
        ret i8 0
    def __new__(b: byte) -> byte:
        return b
    @llvm
    def __new__(i: int) -> byte:
        %0 = trunc i64 %i to i8
        ret i8 %0
    def __str__(self) -> str:
        return seq_str_byte(self)
    def __copy__(self) -> byte:
        return self
    @llvm
    def __bool__(self) -> bool:
        %0 = icmp ne i8 %self, 0
        %1 = zext i1 %0 to i8
        ret i8 %1
    @llvm
    def __eq__(self, other: byte) -> bool:
        %0 = icmp eq i8 %self, %other
        %1 = zext i1 %0 to i8
        ret i8 %1
    @llvm
    def __ne__(self, other: byte) -> bool:
        %0 = icmp ne i8 %self, %other
        %1 = zext i1 %0 to i8
        ret i8 %1
    @llvm
    def __lt__(self, other: byte) -> bool:
        %0 = icmp ult i8 %self, %other
        %1 = zext i1 %0 to i8
        ret i8 %1
    @llvm
    def __gt__(self, other: byte) -> bool:
        %0 = icmp ugt i8 %self, %other
        %1 = zext i1 %0 to i8
        ret i8 %1
    @llvm
    def __le__(self, other: byte) -> bool:
        %0 = icmp ule i8 %self, %other
        %1 = zext i1 %0 to i8
        ret i8 %1
    @llvm
    def __ge__(self, other: byte) -> bool:
        %0 = icmp uge i8 %self, %other
        %1 = zext i1 %0 to i8
        ret i8 %1
    def __repr__(self):
        return str(__ptr__(self), 1).__repr__()
