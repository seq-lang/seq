@extend
class Optional[T]:
    def __new__() -> Optional[T]:
        if isinstance(T, Tuple):
            return __internal__.opt_tuple_new[T]()
        else:
            return __internal__.opt_ref_new[T]()
    def __new__(what: T) -> Optional[T]:
        if isinstance(T, Tuple):
            return __internal__.opt_tuple_new_arg[T](what)
        else:
            return __internal__.opt_ref_new_arg[T](what)
    def __bool__(self) -> bool:
        if isinstance(T, Tuple):
            return __internal__.opt_tuple_bool[T](self)
        else:
            return __internal__.opt_ref_bool[T](self)
    def __invert__(self) -> T:
        if isinstance(T, Tuple):
            return __internal__.opt_tuple_invert[T](self)
        else:
            return __internal__.opt_ref_invert[T](self)
    def __str__(self) -> str:
        return 'None' if not self else str(~self)
    def __is_optional__(self, other: Optional[T]):
        if (not self) or (not other):
            return (not self) and (not other)
        return self.__invert__() is other.__invert__()
optional = Optional

def unwrap[T](opt: Optional[T]) -> T:
    if not opt:
        raise ValueError('optional is None')
    return ~opt
