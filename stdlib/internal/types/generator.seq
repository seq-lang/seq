import internal.gc as gc

@extend
class Generator[T]:
    @__internal__
    def __promise__(self) -> Ptr[T]:
        pass

    def done(self) -> bool:
        self.__resume__()
        return self.__done__()

    def next(self: Generator[T]) -> T:
        if isinstance(T, void):
            pass
        else:
            return self.__promise__()[0]

    def __iter__(self) -> Generator[T]:
        return self
    @llvm
    def __raw__(self) -> Ptr[byte]:
        ret i8* %self
    @llvm
    def __done__(self) -> bool:
        declare i1 @llvm.coro.done(i8* nocapture readonly)
        %0 = call i1 @llvm.coro.done(i8* %self)
        %1 = zext i1 %0 to i8
        ret i8 %1
    @llvm
    def __resume__(self) -> void:
        declare void @llvm.coro.resume(i8*)
        call void @llvm.coro.resume(i8* %self)
        ret void
    def __str__(self) -> str:
        return __internal__.raw_type_str(self.__raw__(), "generator")

    def send(self, what: T) -> T:
        p = self.__promise__()
        p[0] = what
        self.__resume__()
        return p[0]

    @llvm
    def destroy(self) -> void:
        declare void @llvm.coro.destroy(i8*)
        call void @llvm.coro.destroy(i8* %self)
        ret void

generator = Generator
