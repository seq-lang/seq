class list[T]:
    """ List implementation """
    
    arr: array[T]
    len: int

# Magic methods

    def __init__(self: list[T], arr: array[T], len: int):
        self.arr = arr
        self.len = len

    def __init__(self: list[T], cap: int):
        self.arr = array[T](cap)
        self.len = 0

    def __init__(self: list[T]):
        self.arr = array[T](10)
        self.len = 0

    def __init__(self: list[T], it: generator[T]):
        self.arr = array[T](10)
        self.len = 0
        for i in it:
            self.append(i)

    def __init__(self: list[T], other: list[T]):
        self.arr = array[T](other.len)
        self.len = 0
        for i in other:
            self.append(i)

    def __len__(self: list[T]):
        return self.len

    def __bool__(self: list[T]):
        return len(self) > 0

    def __getitem__(self: list[T], idx: int):
        if idx < 0:
            idx += len(self)
        self._idx_check(idx, "list index out of range")
        return self.arr[idx]

    def __prefetch__(self: list[T], idx: int):
        (self.arr.ptr + idx).__prefetch_r3__()

    def __setitem__(self: list[T], idx: int, val: T):
        if idx < 0:
            idx += len(self)
        self._idx_check(idx, "list assignment index out of range")
        self.arr[idx] = val

    def __delitem__(self: list[T], idx: int):
        if idx < 0:
            idx += len(self)
        self._idx_check(idx, "list assignment index out of range")
        while idx < self.len - 1:
            self.arr[idx] = self.arr[idx + 1]
            idx += 1
        self.len -= 1

    def __eq__(self: list[T], other: list[T]):
        if len(self) != len(other):
            return False
        for i in range(len(self)):
            if self.arr[i] != other.arr[i]:
                return False
        return True

    def __ne__(self: list[T], other: list[T]):
        return not (self == other)

    def __getitem__(self: list[T], s: eslice):
        return self.__copy__()

    def __getitem__(self: list[T], s: slice):
        start, stop, step, length = slice.adjust_indices(len(self), start=s.start, stop=s.end)
        return list[T](self._copy_arr(start, stop, length), length)

    def __getitem__(self: list[T], s: lslice):
        start, stop, step, length = slice.adjust_indices(len(self), stop=s.end)
        return list[T](self._copy_arr(start, stop, length), length)

    def __getitem__(self: list[T], s: rslice):
        start, stop, step, length = slice.adjust_indices(len(self), start=s.start)
        return list[T](self._copy_arr(start, stop, length), length)

    def __getitem__(self: list[T], s: esslice):
        if s.step == 0:
            self._slice_error()
        start, stop, step, length = slice.adjust_indices(len(self), step=s.step)
        other = list[T](length)
        for i in range(start, stop, step):
            other.append(self.arr[i])
        return other

    def __getitem__(self: list[T], s: sslice):
        if s.step == 0:
            self._slice_error()
        start, stop, step, length = slice.adjust_indices(len(self), start=s.start, stop=s.end, step=s.step)
        other = list[T](length)
        for i in range(start, stop, step):
            other.append(self.arr[i])
        return other

    def __getitem__(self: list[T], s: lsslice):
        if s.step == 0:
            self._slice_error()
        start, stop, step, length = slice.adjust_indices(len(self), stop=s.end, step=s.step)
        other = list[T](length)
        for i in range(start, stop, step):
            other.append(self.arr[i])
        return other

    def __getitem__(self: list[T], s: rsslice):
        if s.step == 0:
            self._slice_error()
        start, stop, step, length = slice.adjust_indices(len(self), start=s.start, step=s.step)
        other = list[T](length)
        for i in range(start, stop, step):
            other.append(self.arr[i])
        return other

    def __setitem__(self: list[T], s: eslice, other: generator[T]):
        self.clear()
        for a in other:
            self.append(a)

    def __setitem__(self: list[T], s: slice, other: generator[T]):
        start, stop, step, length = slice.adjust_indices(len(self), start=s.start, stop=s.end)
        self._assign_slice(start, stop, other)

    def __setitem__(self: list[T], s: lslice, other: generator[T]):
        start, stop, step, length = slice.adjust_indices(len(self), stop=s.end)
        self._assign_slice(start, stop, other)

    def __setitem__(self: list[T], s: rslice, other: generator[T]):
        start, stop, step, length = slice.adjust_indices(len(self), start=s.start)
        self._assign_slice(start, stop, other)

    def __delitem__(self: list[T], s: eslice):
        self.clear()

    def __delitem__(self: list[T], s: slice):
        start, stop, step, length = slice.adjust_indices(len(self), start=s.start, stop=s.end)
        self._assign_slice(start, stop, None)

    def __delitem__(self: list[T], s: lslice):
        start, stop, step, length = slice.adjust_indices(len(self), stop=s.end)
        self._assign_slice(start, stop, None)

    def __delitem__(self: list[T], s: rslice):
        start, stop, step, length = slice.adjust_indices(len(self), start=s.start)
        self._assign_slice(start, stop, None)

    def __contains__(self: list[T], x: T):
        for a in self:
            if a == x:
                return True
        return False

    def __copy__(self: list[T]):
        return list[T](self.arr.__copy__(), self.len)

    def __iter__(self: list[T]):
        i = 0
        while i < self.len:
            yield self.arr[i]
            i += 1

    def __reversed__(self: list[T]):
        i = self.len - 1
        while i >= 0:
            yield self.arr[i]
            i -= 1

    def __add__(self: list[T], other: list[T]):
        v = list[T](self.len + other.len)
        for a in self:
            v.append(a)
        for a in other:
            v.append(a)
        return v

    def __iadd__(self: list[T], other: list[T]):
        for a in other:
            self.append(a)
        return self

    def __mul__(self: list[T], n: int):
        if n <= 0:
            return list[T]()

        new_len = self.len * n
        v = list[T](new_len)
        i = 0
        while i < n:
            j = 0
            while j < self.len:
                v.append(self[j])
                j += 1
            i += 1
        return v

    def __imul__(self: list[T], n: int):
        if n == 1:
            return self

        if n <= 0:
            self.clear()
            return self

        len0 = len(self)
        new_cap = n * len0
        if self.arr.len < new_cap:
            p = ptr[T](_gc.realloc(cobj(self.arr.ptr), new_cap * _gc.sizeof[T]()))
            self.arr = array[T](p, new_cap)

        idx = len0
        i = 0
        while i < n - 1:
            j = 0
            while j < len0:
                self.arr[idx] = self.arr[j]
                idx += 1
                j += 1
            i += 1

        self.len = new_cap
        return self

    def __str__(self: list[T]) -> str:
        n = len(self)
        if n == 0:
            return "[]"
        else:
            y = ["[", str(self[0])]
            for i in range(1, n):
                y.append(", ")
                y.append(str(self[i]))
            y.append("]")
            return str.cat(y)


# Helper functions

    def append(self: list[T], x: T):
        self._resize_if_full()
        self.arr[self.len] = x
        self.len += 1

    def ext(self: list[T], itr):
        # TODO: can't use "extend" here since it is a keyword!
        for a in itr:
            self.append(a)

    def insert(self: list[T], idx: int, x: T):
        if idx < 0:
            idx += len(self)
        self._idx_check(idx, "insert index out of range")
        self._resize_if_full()
        i = self.len
        while i > idx:
            self.arr[i] = self.arr[i-1]
            i -= 1
        self.arr[idx] = x
        self.len += 1

    def pop(self: list[T], idx: int = -1):
        if len(self) == 0:
            raise IndexError("pop from empty list")
        if idx < 0:
            idx += len(self)
        self._idx_check(idx, "pop index out of range")
        x = self[idx]
        del self[idx]
        return x

    def remove(self: list[T], x: T):
        i = 0
        for a in self:
            if a == x:
                del self[i]
                return True
            i += 1
        return False

    def clear(self: list[T]):
        self.len = 0

    def index(self: list[T], x: T):
        i = 0
        for a in self:
            if a == x:
                return i
            i += 1
        return -1

    def count(self: list[T], x: T):
        count = 0
        for a in self:
            if a == x:
                count += 1
        return count

    def reverse(self: list[T]):
        i = 0
        while i < self.len//2:
            j = self.len - i - 1
            x = self[i]
            self[i] = self[j]
            self[j] = x
            i += 1

# Internal helpers

    def _idx_check(self: list[T], idx: int, msg: str):
        if idx >= self.len or idx < 0:
            raise IndexError(msg)

    def _slice_error(self: list[T]):
        raise IndexError("slice step cannot be zero")

    def _resize(self: list[T], new_cap: int):
        p = ptr[T](_gc.realloc(cobj(self.arr.ptr), new_cap * _gc.sizeof[T]()))
        self.arr = array[T](p, new_cap)

    def _resize_if_full(self: list[T]):
        if self.len == self.arr.len:
            new_cap = (1 + 3*self.len) // 2
            self._resize(new_cap)

    def __hash__(self: list[T]):
        # https://www.boost.org/doc/libs/1_35_0/doc/html/boost/hash_combine_id241013.html
        seed = 0
        for v in self:
            seed ^= v.__hash__() + 0x9e3779b9 + (seed << 6) + (seed >> 2)
        return seed

    def _assign_slice(self: list[T], ilow: int, ihigh: int, v: optional[generator[T]]):
        a = self
        recycle = ptr[T]()
        vitem = list[T](a for a in ~v) if v else None
        n = len(vitem) if vitem is not None else 0

        if ilow < 0:
            ilow = 0
        elif ilow > len(a):
            ilow = len(a)

        if ihigh < ilow:
            ihigh = ilow
        elif ihigh > len(a):
            ihigh = len(a)

        norig = ihigh - ilow
        assert norig >= 0
        d = n - norig
        if len(a) + d == 0:
            a.clear()
            return

        s = norig * _gc.sizeof[T]()
        if s:
            recycle = ptr[T](s)
            str.memcpy(ptr[byte](recycle), ptr[byte](a.arr.ptr + ilow), s)

        if d < 0:
            tail = len(a) - ihigh
            str.memmove(ptr[byte](a.arr.ptr + (ihigh + d)), ptr[byte](a.arr.ptr + ihigh), tail)
            a._resize(len(a) + d)
        elif d > 0:
            k = len(a)
            a._resize(k + d)
            str.memmove(ptr[byte](a.arr.ptr + (ihigh + d)), ptr[byte](a.arr.ptr + ihigh), (k - ihigh) * _gc.sizeof[T]())

        k = 0
        while k < n:
            a.arr[ilow] = vitem.arr[k]
            k += 1
            ilow += 1
        a.len += d

    def _copy_arr(self: list[T], start: int, stop: int, length: int):
        if length <= 0:
            return array[T](ptr[T](), 0)
        return copy(self.arr.__slice__(start, stop))
