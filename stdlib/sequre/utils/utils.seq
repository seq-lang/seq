import random
import internal.gc as gc

import param


def get_address(port: int) -> str:
    return f"{param.AF_PREFIX}{port}"


def shapeof(value):
    if isinstance(value, list[list]):
        return value.shape()
    elif isinstance(value, list):
        return len(value)
    elif isinstance(value, int) or isinstance(value, param.int_t):
        return False
    
    raise TypeError(f'Invalid type for {value}')

def field_size[TP]():
    if isinstance(TP, param.int_t) or isinstance(TP, list[param.int_t]) or isinstance(TP, list[list[param.int_t]]):
        return gc.sizeof[param.transfer_int]()
    
    return gc.sizeof[param.transfer_int_small]()
    

def zeros[TP](rows: int, cols: int) -> list[list[TP]]:
    return [[TP(0) for _ in range(cols)] for _ in range(rows)]


def switch_pair[T1, T2](t: tuple[T1, T2]) -> tuple[T2, T1]:
    return t[1], t[0]


def cartesian(l_1: list[str], l_2: list[str]) -> list[str]:
    c = list(len(l_1) * len(l_2))
    for e_1 in l_1:
        for e_2 in l_2:
            c.append(f'{e_1} {e_2}')
            # c.append(e_1 + e_2)
    return c


def evalp[TP](x: list[TP], coefs: list[TP], exps: list[list[int]], field: TP) -> TP:
        result = TP(0)
        for coef, exp in zip(coefs, exps):
            result += x.powers(exp, field) * coef
        
        return result


def rand_bits_deprecated[TP](shape: list[int], num_bits: int, field: TP) -> list[list[TP]]:
    # TODO: Deprecate this method.
    # assert num_bits < param.SIZE_OF_U * 8, f'Invalid number of bits for random bits generator: {num_bits}'

    # if num_bits < 63:
    #     upper_limit = TP(1) << num_bits
    #     return rand_mat(shape, upper_limit) % field
    
    # print(
    #     f'Info: Number of bits offset: {num_bits}.'
    #     f' This will be deprecated once random support for i>64 is added')

    # a = TypeOps.rand_bits(shape, num_bits // 2, field)
    # b = TypeOps.rand_bits(shape, num_bits // 2, field)

    # return a * b
    raise NotImplementedError()


def rand_bits_vec[TP](length: int, num_bits: int, field: TP) -> list[TP]:
    # rand_mat_bits = TypeOps.rand_bits([1, length], num_bits, field)
    # return rand_mat_bits[0]
    raise NotImplementedError()


def __rand_int(field) -> int:
    return random.randint(1, int(field) - 1)


def __rand_vec[TP](length: int, base: TP) -> list[TP]:
    l = list[TP](length)
    for _ in range(length): l.append(TP(__rand_int(base)))
    return l


def __rand_mat[TP](shape: list[int], base: TP) -> list[list[TP]]:
    m, n = shape
    l = list[list[TP]](m)
    for _ in range(m): l.append(__rand_vec(n, base))
    return l
