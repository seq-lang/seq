name: Seq CI

on:
  push:
    branches:
      - master
      - develop
      - gh-actions
  pull_request:
    branches:
      - develop

jobs:
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
      - name: Check
        if: github.ref == 'refs/heads/master' && contains(github.ref, 'tags/v')
        id: check
        run: echo "::set-output name=MAKE_RELEASE::true"

      - name: Create Release
        id: create_release
        if: steps.check.outputs.MAKE_RELEASE
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Output Release URL File
        if: steps.check.outputs.MAKE_RELEASE
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt

      - name: Save Release URL File for Publish
        if: steps.check.outputs.MAKE_RELEASE
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  precise:
    runs-on: ubuntu-latest
    name: Seq CI (ubuntu-precise)
    needs: [release]
    steps:
      - uses: actions/checkout@v2

      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: deps
          key: ubuntu-precise-deps

      - name: Main
        uses: ./.github/actions/build-precise

      - name: Get Release URL
        id: get_release_url
        if: github.ref == 'refs/heads/master' && contains(github.ref, 'tags/v')
        run: |
          echo ::set-output name=file_name::${REPOSITORY_NAME##*/}-${TAG_REF_NAME##*/v} # RepositoryName-v1.0.0
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
        env:
          TAG_REF_NAME: ${{ github.ref }}
          REPOSITORY_NAME: ${{ github.repository }}

      - name: Upload Release Asset
        if: github.ref == 'refs/heads/master' && contains(github.ref, 'tags/v')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_url.outputs.upload_url }}
          asset_path: ./seq-darwin-x86_64.tar.gz
          asset_name: seq-darwin-x86_64.tar.gz
          asset_content_type: application/gzip

  main:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
    runs-on: ${{ matrix.os }}
    name: Seq CI
    needs: [release]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Find Python
        run: echo "SEQ_PYTHON=$(python test/python/find-python-library.py)" >> $GITHUB_ENV

      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: deps
          key: ${{ runner.os }}-deps

      - name: Build Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: ./scripts/deps.sh 2
        env:
          CC: clang
          CXX: clang++

      - name: Linux Setup
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          echo "LIBEXT=so" >> $GITHUB_ENV
          echo "OS_NAME=linux" >> $GITHUB_ENV

      - name: macOS Setup
        if: startsWith(matrix.os, 'macos')
        run: |
          echo "LIBEXT=dylib" >> $GITHUB_ENV
          echo "OS_NAME=osx" >> $GITHUB_ENV

      - name: Build
        run: |
          mkdir build
          ln -s $(pwd)/deps/lib/libomp.${LIBEXT} $(pwd)/build/libomp.${LIBEXT}
          echo "SEQ_HTSLIB=$(pwd)/deps/lib/libhts.${LIBEXT}" >> $GITHUB_ENV
          (cd build && cmake .. -DCMAKE_BUILD_TYPE=Release \
                                -DSEQ_DEP=$(pwd)/../deps \
                                -DCMAKE_C_COMPILER=${CC} \
                                -DCMAKE_CXX_COMPILER=${CXX})
          cmake --build build --config Release -- VERBOSE=1
        env:
          CC: clang
          CXX: clang++

      - name: Test
        run: |
          build/seqtest
          build/seqc test/core/helloworld.seq
        env:
          SEQ_PATH: ./stdlib
          PYTHONPATH: ./test/python

      - name: Build Documentation
        run: |
          python -m pip install --upgrade pip
          pip install wheel sphinx sphinxcontrib-napoleon sphinx-rtd-theme breathe exhale
          (cd docs/sphinx && python docgen.py ../../stdlib)
          if ! make -C docs/sphinx html 2>sphinx.log; then
            cat sphinx.log
            false
          fi

      - name: Deploy Documentation
        if: github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/sphinx/_build/html
          cname: docs.seq-lang.org
          force_orphan: true

      - name: Artifact Environment
        run: |
          echo "SEQ_BUILD_ARCHIVE=seq-$(uname -s | awk '{print tolower($0)}')-$(uname -m).tar.gz" >> $GITHUB_ENV
          echo "SEQ_DEP_ARCHIVE=seq-deps-${OS_NAME}.tar.bz2" >> $GITHUB_ENV

      - name: Prepare Artifacts
        run: |
          mkdir -p seq-deploy/bin seq-deploy/lib/seq
          cp build/seqc seq-deploy/bin/
          cp build/libseq*.${LIBEXT} seq-deploy/lib/seq/
          cp deps/lib/libomp.${LIBEXT} seq-deploy/lib/seq/
          cp -r stdlib seq-deploy/lib/seq/
          tar -czf ${SEQ_BUILD_ARCHIVE} seq-deploy
          tar -cjf ${SEQ_DEP_ARCHIVE} deps
          du -sh seq-deploy
          du -sh deps
          ls -lah ${SEQ_DEP_ARCHIVE}

      - name: Get Release URL
        id: get_release_url
        if: github.ref == 'refs/heads/master' && contains(github.ref, 'tags/v')
        run: |
          echo ::set-output name=file_name::${REPOSITORY_NAME##*/}-${TAG_REF_NAME##*/v} # RepositoryName-v1.0.0
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
        env:
          TAG_REF_NAME: ${{ github.ref }}
          REPOSITORY_NAME: ${{ github.repository }}

      - name: Upload Release Asset
        if: github.ref == 'refs/heads/master' && contains(github.ref, 'tags/v') && startsWith(matrix.os, 'macos')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_url.outputs.upload_url }}
          asset_path: ./seq-darwin-x86_64.tar.gz
          asset_name: seq-darwin-x86_64.tar.gz
          asset_content_type: application/gzip
